<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    
    <title><![CDATA[Leo Lee]]></title>
    <link href="http://swplzj.github.io/atom.xml" rel="self"/>
    <link href="http://swplzj.github.io/"/>
    <updated>2017-01-23T16:17:03+08:00</updated>
    <id>http://swplzj.github.io/</id>
    <author>
        <name><![CDATA[Leo Lee]]></name>
        <email><![CDATA[swplzj@126.com]]></email>
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>
    
    
    <entry>
        <title type="html"><![CDATA[2016年个人总结]]></title>
        <link href="http://swplzj.github.io/blog/2017/01/23/2016nian-ge-ren-zong-jie/"/>
        <updated>2017-01-23T16:08:58+08:00</updated>
        <id>http://swplzj.github.io/blog/2017/01/23/2016nian-ge-ren-zong-jie</id>
        <content type="html"><![CDATA[<h1>收获2016</h1>

<hr />

<h2>1月，希望</h2>

<ul>
<li>总结2015，制定了2016年的计划，希望满满。
  ##  2月，喜悦

<ul>
<li>第一次和老婆在家过年，感觉到过年的喜悦。

<ul>
<li>拜见岳父岳母，以女婿的身份在老婆家享了几天清福。

<h2>3月，多福</h2></li>
</ul>
</li>
<li>回老家和老朋友相聚，小米带我们去吃了特色菜，很赞。

<ul>
<li>参加姐的婚礼，希望姐从此幸福的生活。</li>
<li>我又多了外甥，妹生了二胎，生日和他爸一天。</li>
<li>老婆给我买了 Kindle voyage，爱上了阅读，来回京的路上看完了《一个人的朝圣》。

<h2>4月，旅游</h2></li>
</ul>
</li>
<li>和北京朋友自驾游到平谷看桃花海，杯具：桃花没开；洗具：我们看了梨花，游了金山。

<ul>
<li>和怀孕在身的老婆游玩玉渊潭，发现慢下来，生活很美好。</li>
<li>接妈来到北京，回家的时候打Uber，师傅竟然是妈妈同学的小外甥，当然和妈一个村，是不是很神奇！

<h2>5月，全新</h2></li>
</ul>
</li>
<li>成立并加入前端研发组，肩上的责任更加重大了，也有了更大的发挥空间，加油吧。

<ul>
<li>发现了很多利器，一发不可收拾，看完了各路人士的利器，从中也学到不少知识。</li>
<li>带着妈和老婆到天安门旅游，拍照冲洗并寄给爸。</li>
<li>去北京大学口腔医院拔了两颗智齿，防患于未然，免得把好牙带坏。至此，已经拔除三颗智齿，还有一颗未长出。

<h2>6月，收获</h2></li>
</ul>
</li>
<li>岳父岳母大人驾到，遗憾的是在北京时间住的太短，没来的及游玩太多景点，离京的时候老婆和妈哭的稀里哗啦，我差点没忍住。

<ul>
<li>老婆怀胎10月，终于迎来了儿子的出生，老婆辛苦了。</li>
<li>经历了1年多的等待，终于迎来了收房的日子，从此翻身成业主，6月19日，在北京生活的我进入了一个新的人生阶段。</li>
<li>没有车的我，先为未来的爱车购置了车位。

<h2>7月，美好</h2></li>
</ul>
</li>
<li>和好友合租，之前有过两年合租经历，这该是我在北京收获的最难得的友谊和合租经历吧。

<ul>
<li>为老婆购买 iPhone6s。</li>
<li>购买期待已久的 Bose QuietComfort 35，带上它，世界都安静了。

<h2>8月，聚散</h2></li>
</ul>
</li>
<li>为儿子办满月（两个月），让我们有了两次团聚机会，在濮阳把我这边一大家子聚在一起，在周口把老婆这边一大家子聚在一起，庆团聚。

<ul>
<li>在濮阳办理完酒席后，和爸妈、姐妹暂时分离去了周口，在周口办理完酒席后，和岳父岳母、老婆孩子暂时分离独自回了北京，伤离别。</li>
<li>第一次长途骑行。一人从十里堡骑行到十三陵水库，总行程110多公里，骑行感受到的只有自由。</li>
<li>隔空看儿子，每天中午吃完饭使用FaceTime或微信来看看儿子，看着他一点点长大，感觉很幸福。

<h2>9月，实干</h2></li>
</ul>
</li>
<li>第二次长途骑行，和张武龙结伴从十里堡到白羊沟，总行程200多公里，真正挑战了自己的极限。

<ul>
<li>老婆、孩子和父母在北京中秋节团聚。</li>
<li>邀请好友万宗亮帮忙装修，家装正式开始。

<h2>10月，辛苦</h2></li>
</ul>
</li>
<li>十一长假陪妹妹一大家和老婆、孩子、父母一起在北京游玩了三天，累并快乐着。

<ul>
<li>装修在工地，住在工地，眼看着毛胚房一点点有了家的模样。</li>
<li>岳父母带着果果回老家了，我妈来北京照顾宝贝了，一家人都在为照顾宝宝而忙。</li>
<li>和值得学习的人一起完成了一个项目，受益匪浅。</li>
<li>老婆产后开始工作，再加上带孩子很辛苦，可以体会到，值得庆幸的是，老婆成功转型产品经理。

<h2>11月，选择</h2></li>
</ul>
</li>
<li>办理了居住证。

<ul>
<li>装修进入尾声

<h2>12月，搬迁</h2></li>
</ul>
</li>
<li>部门搬迁到五道口，每天通勤时间增加了两个小时。新环境，新机会。

<ul>
<li>工作上开始加班，个人开始放松，玩了游戏，看了美剧。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[iOS UIAutomation 自动化测试]]></title>
        <link href="http://swplzj.github.io/blog/2016/08/05/ios-zi-dong-hua-ce-shi-%5Bnil%5D-uiautomation-shi-yong-dao-de-javascript-zhi-shi/"/>
        <updated>2016-08-05T17:19:00+08:00</updated>
        <id>http://swplzj.github.io/blog/2016/08/05/ios-zi-dong-hua-ce-shi-[nil]-uiautomation-shi-yong-dao-de-javascript-zhi-shi</id>
        <content type="html"><![CDATA[<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_uiautomation_topic.png"></p>

<h3>介绍</h3>

<ul>
<li>为什么创建自动化测试用例？</li>
<li>什么是 UI 自动化测试</li>
<li>怎样对一个应用进行自动化测试</li>
<li>自动化测试的优点及问题</li>
<li>录制自动化测试脚本</li>
<li>总结</li>
</ul>


<!--more-->


<h2>为什么创建自动化测试用例？</h2>

<ul>
<li>在你睡觉的时候就能找到 bug</li>
<li>可重复的进行回归测试用例</li>
</ul>


<h2>什么是 UIAutomation 自动化测试</h2>

<p>UIAutomation的功能测试代码是用Javascript编写的。UIAutomation和Accessibility有着直接的关系，你将用到通过标签和值的访问性来获得UI元素，同时完成相应的交互操作。</p>

<p>自动化测试代码可以让你能够快速地跟踪你程序中的回归和性能方面的问题，这样你就不用担心你新增的功能会影响到你之前已经完成开发的程序了。</p>

<h2>怎样对一个应用进行自动化测试</h2>

<p>这里先看一下苹果官方给出的一些编写测试用例用到的脚本知识。</p>

<h3>控制层级</h3>

<ul>
<li>Target application

<ul>
<li>Main window

<ul>
<li>View

<ul>
<li>Element

<ul>
<li>Child element</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>这是整个的层级关系，必须根据这个层级才能准确地获取一个元素，进而对特定元素进行修改、触发事件等。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Target application
</span><span class='line'>UIATarget.localTarget().frontMostApp()
</span><span class='line'>
</span><span class='line'>// Main window
</span><span class='line'>UIATarget.localTarget().frontMostApp().mainWindow ()
</span><span class='line'>
</span><span class='line'>// View
</span><span class='line'>UIATarget.localTarget().frontMostApp().mainWindow ().tableViews()[0]
</span><span class='line'>
</span><span class='line'>// Element
</span><span class='line'>UIATarget.localTarget().frontMostApp().mainWindow ().tableViews()[0].cells()[0]
</span><span class='line'>
</span><span class='line'>// Child element
</span><span class='line'>
</span><span class='line'> UIATarget.localTarget().frontMostApp().mainWindow().tableViews()[0].cells()[0].elements()[“Chocolate Cake”]</span></code></pre></td></tr></table></div></figure>


<h3>按钮点击</h3>

<pre><code> UIATarget.localTarget().frontMostApp().navigationBar().buttons()["Add"].tap();
</code></pre>

<h3>文本输入</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> var name = “Turtle Pie”;
</span><span class='line'>
</span><span class='line'> UIATarget.localTarget().frontMostApp().mainWindow().textFields()[0].setValue(name);</span></code></pre></td></tr></table></div></figure>


<h3>标签切换</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> var tabBar = UIATarget.localTarget().frontMostApp().tabBar();
</span><span class='line'> var selectedTabName = tabBar.selectedButton().name();
</span><span class='line'> if (selectedTabName != "Unit Conversion") {
</span><span class='line'>
</span><span class='line'>  tabBar.buttons()["Unit Conversion"].tap();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>视图滚动</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> UIATarget.localTarget().frontMostApp().mainWindow().tableViews()[0].scrollToElementWithPredicate("name beginswith 'Turtle Pie'");</span></code></pre></td></tr></table></div></figure>


<h3>校验</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var cell = UIATarget.localTarget().frontMostApp().mainWindow().tableViews()[0].cells().firstWithPredicate("name beginswith 'Turtle Pie'")
</span><span class='line'>if (cell.isValid())
</span><span class='line'>{
</span><span class='line'>    UIALogger.logPass(testName);
</span><span class='line'>} else {
</span><span class='line'>    UIALogger.logFail(testName);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>日志</h3>

<h4>开始和结束测试</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var testName = "My first test";
</span><span class='line'>UIALogger.logStart(testName);
</span><span class='line'>...
</span><span class='line'>// test code
</span><span class='line'>...
</span><span class='line'>UIALogger.logPass(testName);</span></code></pre></td></tr></table></div></figure>


<h4>测试进行中输出日志</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var testName = "My first test";
</span><span class='line'>UIALogger.logStart(testName);
</span><span class='line'>...
</span><span class='line'>UIALogger.logMessage("Logging about my test");
</span><span class='line'>...
</span><span class='line'>UIALogger.logPass(testName);</span></code></pre></td></tr></table></div></figure>


<h3>截取屏幕</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var testName = "My first test";
</span><span class='line'>UIALogger.logStart(testName);
</span><span class='line'>...
</span><span class='line'>UIALogger.logMessage("Logging about my test");
</span><span class='line'>UIATarget.localTarget().captureScreenWithName(“screenshot1”); // specify a name
</span><span class='line'>for the screenshot
</span><span class='line'>...
</span><span class='line'>UIALogger.logPass(testName);</span></code></pre></td></tr></table></div></figure>


<h3>处理不期望出现的提示框</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIATarget.onAlert = function onAlert(alert) {  var title = alert.name();
</span><span class='line'>  UIALogger.logWarning("Alert with title '" + title + "' encountered!");
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    if (title == "Duplicate Recipe Name") {
</span><span class='line'>        alert.buttons()["Continue"].tap();
</span><span class='line'>
</span><span class='line'>        return true; // bypass default handler
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  return false; // use default handler }</span></code></pre></td></tr></table></div></figure>


<h3>多任务</h3>

<ul>
<li>设置特定时间来禁用应用</li>
<li>自动恢复应用</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UIALogger.logMessage("Deactivating app");
</span><span class='line'>UIATarget.localTarget().deactivateAppForDuration(10);
</span><span class='line'>UIALogger.logMessage("Resuming test after deactivation");</span></code></pre></td></tr></table></div></figure>


<h3>设备方向</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var target = UIATarget.localTarget();
</span><span class='line'>var app = target.frontMostApp();
</span><span class='line'>// set landscape left
</span><span class='line'>target.setDeviceOrientation(UIA_DEVICE_ORIENTATION_LANDSCAPELEFT);
</span><span class='line'>UIALogger.logMessage("Current orientation is " + app.interfaceOrientation());
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>// portrait
</span><span class='line'>target.setDeviceOrientation(UIA_DEVICE_ORIENTATION_PORTRAIT);
</span><span class='line'>UIALogger.logMessage("Current orientation is " + app.interfaceOrientation());</span></code></pre></td></tr></table></div></figure>


<h3>点击交互高级用法</h3>

<ul>
<li>单点</li>
<li>捏合</li>
<li>拖拽和滑动</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Taps
</span><span class='line'>UIATarget.localTarget().tap({x:100, y:200});
</span><span class='line'>UIATarget.localTarget().doubleTap({x:100, y:200});
</span><span class='line'>UIATarget.localTarget().twoFingerTap({x:100, y:200});
</span><span class='line'>
</span><span class='line'>// Pinches
</span><span class='line'>UIATarget.localTarget().pinchOpenFromToForDuration({x:20, y:200}, {x:300, y:200},
</span><span class='line'>2);
</span><span class='line'>UIATarget.localTarget().pinchCloseFromToForDuration({x:20, y:200}, {x:300, y:
</span><span class='line'>200}, 2);
</span><span class='line'>
</span><span class='line'>// Drag and Flick
</span><span class='line'>UIATarget.localTarget().dragFromToForDuration({x:160, y:200}, {x:160, y:400}, 1);
</span><span class='line'>UIATarget.localTarget().flickFromTo({x:160, y:200}, {x:160, y:400});</span></code></pre></td></tr></table></div></figure>


<h3>超时处理</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Wait for elements to appear
</span><span class='line'>UIATarget.localTarget().frontMostApp().navigationBar().buttons()["Add"];
</span><span class='line'>
</span><span class='line'>// Five second default timeout
</span><span class='line'>// Custom timeouts
</span><span class='line'>UIATarget.localTarget().pushTimeout(2);
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>UIATarget.localTarget().popTimeout(); </span></code></pre></td></tr></table></div></figure>


<h3>运行 UIAutomation 测试用例</h3>

<h4>使用iOS模拟器测试</h4>

<ol>
<li>打开项目工程；</li>
<li>确保你的项目可以使用模拟器来运行项目；</li>
<li><p>启动Instruments(Product > Profile)或从 Xcode 菜单中打开；</p>

<p> <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_uiautomation_open.png" title="从菜单中打开" ></p></li>
<li><p>选择左边的 iniOS Simulator，然后再选择Automation模板，然后点击“Choose”；</p>

<p> <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_uiautomation_create.png" title="选择模版" ></p></li>
<li><p>Instruments就已经启动好后，然后直接开始录制了。这里先停止录制；</p></li>
<li><p>在左边的Scripts窗口，点击“Add > Create”创建新的脚本；</p></li>
<li><p>在脚本编辑器里，输入下面的代码：</p>

<pre><code class="`"> var target = UIATarget.localTarget();
 var app = target.frontMostApp(); 
 var window = app.mainWindow(); 
 target.logElementTree();
</code></pre></li>
<li>重新运行这段脚本，脚本跑起来后，你可以在日志打完后停止它。</li>
</ol>


<h4>使用iOS设备测试</h4>

<p>这里说的是使用开发证书编译打包，直接在 iOS 设备上运行好了程序，然后使用 Instruments 进行测试。</p>

<ol>
<li>通过USB接口连接上你的iPhone；</li>
<li><p>选择设备及目标测试应用；</p>

<p> <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_device_select.png" title="选择设备及目标测试应用" ></p></li>
<li><p>编写测试用例，并运行；</p>

<p> <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_run_script.png" title="编写脚本并运行" ></p></li>
</ol>


<h4>对 iOS 项目进行 Monkey 测试</h4>

<ol>
<li><a href="http://7xkrxl.com1.z0.glb.clouddn.com/iOSMonkeyTest.rtf">下载 Monkey测试脚本</a></li>
<li><p>在左边的Scripts窗口，点击“Add > Import”导入 Monkey 测试脚本；</p>

<p> <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_run_monkey_script.png" title="Monkey 测试脚本" ></p></li>
<li>运行脚本。</li>
</ol>


<p>你就可以休息了，看着各种页面之间的跳转测试，而且每个测试环节还有截屏图片。</p>

<h2>自动化测试的优点及问题</h2>

<p>通过编写自动化测试，了解到自动化测试的优点和存在的问题。</p>

<p> 优点：</p>

<ul>
<li>可以节省测试人力成本；</li>
<li>减少人为操作失误；</li>
</ul>


<p> 缺点：</p>

<ul>
<li>编写测试脚本耗费时间和精力；</li>
<li>编写脚本获取元素之前必须清楚层级关系；</li>
<li>出现对话框或对于网络请求相关页面不好处理，需要人工处理；</li>
</ul>


<h2>录制自动化测试脚本</h2>

<p>除了刚才说到的手动编写测试脚本，你还可以直接在设备上或者模拟器上录制脚本，然后替换掉原来的。
操作步骤：</p>

<ol>
<li><p>启动Instruments；</p></li>
<li><p>创建一个新的脚本；</p></li>
<li><p>选择脚本编辑器；</p></li>
<li><p>在脚本编辑器的底端，你是否看到了一个红色的按钮？点击它！</p></li>
<li><p>现在，你可以操作你的应用程序；你将看到录制的交互操作出现在脚本窗口（甚至旋转事件）。点击方形按钮来停止录制。</p></li>
</ol>


<p><code>注意:</code></p>

<p>当遇到问题时，加上“UIATarget.delay(1);”</p>

<p>当你在编写脚本的时候，你总是在与时间，动画打交道。UIAutomation有很多方式去获取控件元素，然后等待它们变为可用状态，即使有时候它们还没有显示出来，但根据这篇文档里提到的，最好的建议是：</p>

<p>当遇到问题时，加上UIATarget.delay(1);!</p>

<h2>总结</h2>

<p>自动化测试还是值得尝试的，毕竟避免重复的工作是我们的追求，做自动化测试前期要投入大量的时间成本，但一旦这个流程搭建好只好，也许你会发现，这种工作方式为你节省不少时间。</p>

<p>参考文献：</p>

<p> <a href="http://developer.apple.com/devcenter/download.action?path=/wwdc_2010/wwdc_2010_video_assets__pdfs/306__automating_user_interface_testing_with_instruments.pdf">WWDC 2010 - Session 306 - Automating User Interface Testing with Instruments</a></p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Rake 和 Zsh 冲突的解决方法]]></title>
        <link href="http://swplzj.github.io/blog/2016/08/04/rake-he-zsh-chong-tu-de-jie-jue-fang-fa/"/>
        <updated>2016-08-04T14:40:14+08:00</updated>
        <id>http://swplzj.github.io/blog/2016/08/04/rake-he-zsh-chong-tu-de-jie-jue-fang-fa</id>
        <content type="html"><![CDATA[<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_04_zsh_topic.png"></p>

<p>搭建 Jenkins 持续集成之后，总结一下搭建经验吧，写一篇 blog 记录一下，遇到了问题。。。。。。现在用的 shell 是 <code>oh-my-zsh</code>，发现执行 <code>rake new_post["newpost"]</code>时提示<code>zsh: no matches found: new_post[newpost]</code>，不能新建文章。转到<code>bash</code>下再执行相同命令却能成功，想到可能是<code>zsh</code>的问题。<code>Google</code>之，在<code>octpress</code>的<code>issues</code>里找到了答案：<code>zsh</code>会转义<code>[]</code>。</p>

<p>解决的方法有下面三种：</p>

<!--more-->


<ol>
<li>alias rake=&ldquo;noglob rake"，noglob用来取消转义。</li>
<li>rake &ldquo;new_post[title]"。</li>
<li>rake new_post[title]。</li>
</ol>

]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Jenkins 构建 iOS 持续集成]]></title>
        <link href="http://swplzj.github.io/blog/2016/08/04/jenkins-gou-jian-ios-chi-xu-ji-cheng-(%5B%3F%5D-)/"/>
        <updated>2016-08-04T14:35:31+08:00</updated>
        <id>http://swplzj.github.io/blog/2016/08/04/jenkins-gou-jian-ios-chi-xu-ji-cheng-([?]-)</id>
        <content type="html"><![CDATA[<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_04_jenkins_topic.png">
做重复乏味的工作就是在浪费生命和犯罪，尤其是在软件工程中更为明显，生命应该浪费在美好的事物上的原则，就开始了接下来的折腾。项目的持续集成前期看似是浪费时间，但随着项目数量增多，渠道的增加，测试人员、产品经理、项目负责人、大老板等都向你伸手要测试包，也就经常会有：Leo，把最新测试包上传到 Confluence 上了吗？Leo，给我发个最新安装包。来，Leo，这是我们的销售，先给他们安装一下咱们的应用，体验一下。。。。。。我是一个重度 GTD 使用者，决不允许别人这么无休止的打扰我的工作。。。。。。噢，好像跑偏了，简单如题。</p>

<!--more-->


<h3>摘要：</h3>

<p><a href="#01">1. 什么是持续集成</a></br>
<a href="#02">2. 为什么要做持续集成</a></br>
<a href="#03">3. Jenkins 安装及配置</a></br>
<a href="#04">4. 问题总结</a></br></p>

<p><a id="01"></a></p>

<h2>什么是持续集成</h2>

<ul>
<li>持续集成, 简称CI（continuous integration）。</li>
<li>CI作为敏捷开发重要的一步，其目的在于让产品快速迭代的同时，尽可能保持高质量。</li>
<li>CI一种可以增加项目可见性，降低项目失败风险的开发实践。其每一次代码更新，都要通过自动化测试来检测代码和功能的正确性，只有通过自动测试的代码才能进行后续的交付和部署。</li>
<li>CI 是团队成员间（产研测）更好地协调工作，更好的适应敏捷迭代开发，自动完成减少人工干预，保证每个时间点上团队成员提交的代码都能成功集成的，可以很好的用于对Android/iOS项目的打包。</li>
</ul>


<p><a id="02"></a></p>

<h2>为什么要做持续集成</h2>

<p>从我理解的角度和我遇到的问题来看，有三点促使我做 iOS 的持续化集成：</p>

<ol>
<li><p>避免工作时间碎片化。</p>

<p> 学过面向对象的同学都知道，想要创建某个类都是首先申请内存环境进行init初始化，其实，我们的工作也是这样的，当你深入做某项工作的时候，其他人来打断你的思考，这就会破坏那种精深学习研究的氛围，你的大脑就会切换到另外一件事情上来，这种频繁切换造成了时间碎片化，造成了很多时间到浪费。</p></li>
<li><p>不做重复乏味的体力活。</p>

<p> 我们的应用分为 In－House 版本和 AppStore 版本，同时维护两个项目，然后在上线前期测试环节会有比较频繁的编译、打包、分发、安装的体力活，手动打包是一件很不美好的事情，所要是机器为我们来做这些无聊的事情。我们值得研究更好的技术。</p></li>
<li><p>避免手动打包造成的不必要的错误。</p>

<p> 同时维护多个项目，一个项目中又有多个 Schemes，多个 Targets，电脑中安装了很多证书和描述文件，在每次打包的时候就会面对选择证书，选择描述文件的问题，稍不留神选错证书或选错 Scheme 或选错 Target，轻则编译失败浪费点时间，增加点烦躁，更严重的是造成线上事故，丝毫没有夸张，线上无小事。所以，使用持续集成，可以精确的对项目进行配置，避免人工手动操作的失误。</p></li>
</ol>


<p><a id="03"></a></p>

<h2>Jenkins 安装及配置</h2>

<p>搭建构建平台之前，先要对整个流程有个清楚的理解，这里我画了一个简单的流程图方便我们理解其中要做的关键的事情。</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_04_jenkins_workflow_chart.png" title="Jenkins集成流程图" ></p>

<p>由于 Jenkins 经过多年的发展，其活跃的社区和丰富的插件让其成为了业界最受欢迎的CI服务器。通过使用Xcode插件，可以非常方便在Jenkins中运行iOS项目的构建脚本，所以我们选择 Jenkins 作为 CI 工具。</p>

<h3>一、Jenkins的安装与启动</h3>

<h4>安装</h4>

<p>1.使用命令行安装</p>

<pre><code>    $ brew install jenkins
</code></pre>

<p>如果没有安装java环境的话会出现以下错误，需要先安装jenkins需要安装java环境， <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">JDK下载地址</a></p>

<pre><code>jenkins: Java 1.7+ is required to install this formula. You can install with Homebrew Cask: brew install Caskroom/cask/java You can download from: http://www.oracle.com/technetwork/java/javase/downloads/index.html Error: An unsatisfied requirement failed this build.
</code></pre>

<p>2.直接从 Jenkins 的<a href="https://jenkins-ci.org">官网</a>下载最新安装包。</p>

<h4>启动</h4>

<p>安装完成后，启动jenkins，命令：</p>

<pre><code>$ jenkins
</code></pre>

<p>在浏览器中输入以下地址访问：</p>

<pre><code>http://localhost:8080/
</code></pre>

<h3>二、插件的安装</h3>

<p>我们需要安装相关的插件才能顺利对项目进行编译，需要安装以下插件：</p>

<ul>
<li><p>安装GitLab插件</p>

<p>  因为我们用的是GitLab来管理源代码，Jenkins本身并没有自带GitLab插件，所以我们需要依次选择 系统管理->管理插件，在“可选插件”中选中“GitLab Plugin”和“Gitlab Hook Plugin”这两项，然后安装。</p></li>
<li><p>安装Xcode插件</p>

<p>  同安装GitLab插件的步骤一样，我们依次选择系统管理->管理插件，在“可选插件”中选中“Xcode integration”安装。</p></li>
<li><p>安装签名证书管理插件</p>

<p>  iOS打包内测版时，需要发布证书及相关签名文件，因此这两个插件对于管理iOS证书非常方便。还是在系统管理->管理插件，在“可选插件”中选中“Credentials Plugin”和“Keychains and Provisioning Profiles Management”安装。</p></li>
<li><p>安装FTP插件</p>

<p>  在系统管理->管理插件，在“可选插件”中选中“Publish over FTP”安装。</p></li>
<li><p>安装脚本插件</p>

<p>  这个插件的功能主要是用于在build后执行相关脚本。在系统管理->管理插件，在“可选插件”中选中“Post-Build Script Plug-in”安装。</p></li>
</ul>


<p>以上插件安装完成后，重启 Jenkins!</p>

<h3>三、Jenkins 全局配置</h3>

<ul>
<li><p>源码管理：</p>

<p>  我们代码管理使用的是GitLab，先需要配置SSH，我们可以在Jenkins的证书管理中添加SSH。在Jenkins管理页面，选择“Credentials”，然后选择“Global credentials (unrestricted)”，点击“Add Credentials”，如下图所示，我们填写自己的SSH信息，然后点击“Save”，这样就把SSH添加到Jenkins的全局域中去了。</p></li>
</ul>


<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_ssh_public_key.png" title="SSH Private Key Setup" ></p>

<ul>
<li><p>上传配置编译打包证书及描述文件</p>

<p>  iOS 项目编译打包需要证书和签名文件，这里我们又需要用到Jenkins的插件，在系统管理页面，选择“Keychains and Provisioning Profiles Management”。</p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_profiles_management.png" title="Keychains and Provisioning Profiles Management" ></p>

<p>  进入插件设置里面</p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_keychain_sign_cer_upload.png" title="上传登录钥匙串及签名证书文件" ></p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_profile_upload.png" title="上传描述文件" ></p>

<p>  点击保存就可以了。</p></li>
<li><p>自动化构建</p>

<p>  接下来就是重头戏了，包括Xcode编译、打包、上传测试分发平台、发送通知邮件等。</p>

<ul>
<li><p> 创建项目</p>

<p>   在Jenkins中，所有的任务都是以“item”为单位的。接下来我们就新建一个iOS的项目来开始自动化构建。点击“新建”，输入item的名称，选择“构建一个自由风格的软件项目”，然后点击“OK”。</p></li>
</ul>


<p>   <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_create_item.png" title="创建项目" ></p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_general.png" title="编辑项目" ></p>

<ul>
<li><p> 源码管理</p>

<p>  在源码管理中，选择Git，按下图进行配置：</p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_source_code_management.png" title="源码管理配置" ></p></li>
<li><p>构建触发器</p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_build_trigger.png" title="构建触发器" ></p></li>
<li><p>编译环境</p>

<p>  在编译环境中，勾选“Keychains and Code Signing Identities”和“Mobile Provisioning Profiles”。按照下图进行配置：</p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_build_environment_setup.png" title="编译环境配置" ></p></li>
<li><p>编译</p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_build_general.png" title="编译设置" ></p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_build_keychain.png" title="编辑设置" ></p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_build_cocoapods.png" title="CocoaPods 项目设置" ></p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_post_build_action.png" title="设置执行脚本" ></p>

<p>  到目前为止所有的构建设置完了，保存，可以构建项目了。</p></li>
</ul>
</li>
</ul>


<p><a id="04"></a></p>

<h2>问题总结</h2>

<ol>
<li><p>Jenkins 编译 cocoapods 项目遇到的问题: &ldquo;Jenkins xcodebuild There are no schemes in workspace &rdquo;</p>

<p> 出现原因：</p>

<p> 使用cocoapods管理项目时，会出现，多个 Schemes，然而这些 Schemes 都是私有的而不是共享的。</p>

<p> 解决方法：</p>

<ol type="a">
<li>打开项目的 workspace 文件；</li>
<li>从项目菜单中选择 Scheme > Manage Schemes；</li>
<li>修改项目后边的"Shared"为勾选状态，“Container”设置为 <code>Workspace</code> 而不是 <code>project</code>；</li>
<li>这时你项目中的＊.xcworkspace/xcshareddata/xcschemes目录下就会出现.xcscheme文件；</li>
<li>打开项目下Git .gitignore文件，确保没有过滤相关文件；</li>
<li>提交项目修改到Git仓库，重新拉取代码就好了。</li>
</ol>


<p> </br>
 参考图如下：</p>

<p> <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_schemes_management.png" title="Git ignore 文件设置" >
 </br> <br/>
 <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_08_05_git_ignore.png" title="Git ignore 文件设置" >
 </br></p></li>
<li><p>构建触发器相关知识</p>

<pre><code class="`"> This field follows the syntax of cron (with minor differences). Specifically, each line consists of 5 fields separated by TAB or whitespace: MINUTE HOUR DOM MONTH DOW MINUTE Minutes within the hour (0-59) HOUR The hour of the day (0-23) DOM The day of the month (1-31) MONTH The month (1-12) DOW The day of the week (0-7) where 0 and 7 are Sunday. To specify multiple values for one field, the following operators are available. In the order of precedence, * '*' can be used to specify all valid values. * 'M-N' can be used to specify a range, such as "1-5" * 'M-N/X' or '*/X' can be used to specify skips of X''s value through the range, such as "*/15" in the MINUTE field for "0,15,30,45" and "1-6/2" for "1,3,5" * 'A,B,...,Z' can be used to specify multiple values, such as "0,30" or "1,3,5" Empty lines and lines that start with '#' will be ignored as comments. In addition, @yearly, @annually, @monthly, @weekly, @daily, @midnight, @hourly are supported.
</code></pre></li>
<li><p>发送邮件失败</p>

<p> <code>我使用的是163邮箱进行发件</code></p>

<p> 编译打包完成后，执行 python 脚本时，报错：(550, &lsquo;User has no permission’)。</p>

<p> 错误可能原因：</p>

<ol type="a">
<li>滥发邮件被锁了；</li>
<li>邮箱刚注册；</li>
<li>发送的邮件里面有HTML文本；</li>
<li>邮箱申请时间不够长；</li>
</ol>


<p> </br></p>

<p> 解决方法：</p>

<ol type="a">
<li>进入你的163邮箱；</li>
<li>设置里选择POP3/SMTP/IMAP；</li>
<li>开启POP3/SMTP/IMAP 这三个服务；</li>
</ol>


<p> </br></p>

<p> 新问题（自己的疏忽）：</p>

<p> 开启之后构建又返回新的错误：163邮箱报错WARN: 535 Error: authentication failed.</p>

<p> 解决：</p>

<p> 开启服务之后，需要使用授权码代替邮箱的密码进行发邮件。 <br/>
 后来测试了几次，163邮箱又报错，索性直接注册了新浪邮箱，再没出现过问题。</p></li>
<li><p>安装包上传至测试分发平台及发送邮件 Python 脚本</p>

<p>  <a href="http://7xkrxl.com1.z0.glb.clouddn.com/auto.python">下载脚本文件</a></p></li>
</ol>


<p><a id="05"></a></p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[iOS Crash 文件解析汇总]]></title>
        <link href="http://swplzj.github.io/blog/2016/05/26/ios-crash-wen-jian-jie-xi-hui-zong/"/>
        <updated>2016-05-26T17:03:52+08:00</updated>
        <id>http://swplzj.github.io/blog/2016/05/26/ios-crash-wen-jian-jie-xi-hui-zong</id>
        <content type="html"><![CDATA[<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_05_25_workplace.jpg" title="workplace" ></p>

<p>所有程序都是无法避免有 Bug 的，有了 Bug 要通过有效的手段技术跟踪、定位、解析、解决，普通的 Bug 看过报崩溃报告就可以很容易解决，当然也会遇到很棘手的 Bug，这是时候就要使尽浑身解数来对付了，下面总结一下自己解决难缠 Bug 的一些方法，希望能够帮助到你。:)</p>

<!--more-->


<h2>方法汇总</h2>

<ol>
<li>友盟分析工具解析崩溃报告；</li>
<li>使用命令行对单个十六进制地址进行解析；</li>
<li>使用 Xcode 对崩溃报告进行解析；</li>
</ol>


<h3>友盟分析工具解析崩溃报告</h3>

<p>我们在项目中加入了友盟统计，此服务中提供的有 Crash 收集和分析工具，这样能够帮助我们监测 App 在设备上的运行状况，还可以及时发现问题并解决问题。通过友盟我们收集 Bug 并准确定位错误所在的类以及行数，具体步骤如下：</p>

<ol>
<li>登录友盟后台，查看并导出崩溃报告，文件格式是<code>.csv</code>；</li>
<li><a href="http://dev.umeng.com/files/download/umcrashtool.zip">下载错误分析工具</a>并解压 zip 得到 <code>umcrashtool</code>文件，可将 <code>umcrashtool</code> 与已下载的 xxx.csv 文件放入同一目录下；</li>
<li><p>在 <code>Terminal</code> 中运行 <code>umcrashtool</code> 命令，参数为错误分析的.csv文件绝对路径，如下：</p>

<pre><code> $ ./umcrashtool [absolutely_path_of_csv_file] 
</code></pre></li>
</ol>


<p>也可以按照先后顺序拖拽 <code>umcrashtool</code>、xxx.csv 文件到<code>Terminal</code>，简单方便；
4. 在 <code>Terminal</code> 中运行 <code>umcrashtool</code>，提示如下: Usage: umcrashtool [export-file-path]，定位后的代码及行数会写入错误分析-symbol.csv文件，与原文件在同一目录下。用工具打开新生成的xxx-symbol.csv文件，便可查看错误发生的源码文件及行数。</p>

<p><code>注意</code>：如果错误分析没有成功，请先确保对应的 xxx.dSYM 文件在<code>~/Library/Developer/Xcode/</code> 或该路径的子目录下。（对于每一个产品发布时archive操作会将dsym文件存放到~/Library/Developer/Xcode/Archives路径下，因此建议保留该路径下的文件，以便后续用工具分析错误。）</p>

<h3>使用命令行对单个十六进制地址进行解析</h3>

<p>使用命令行进入到包含xxx.app.dSYM的路径，并执行下面命令:</p>

<pre><code>dwarfdump --arch=arm64 --lookup 0x10051bc2c xxx.app.dSYM
</code></pre>

<p>其中，<code>arm64</code> 针对具体 <code>crash</code> 对应的机型来改变，<code>lookup</code> 后面的地址为具体的崩溃地址，xxx.app.dSYM为对应该崩溃信息的版本。</p>

<p>还有一种命令：</p>

<pre><code>atos -arch armv7 -o xxxApp 0x1153b9. 
</code></pre>

<p>也是可以分析出这处内存地址反编译回来的源码行。</p>

<p>但是，还是有分析不出来的 Bug</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016-05-25-crash-report.png" title="crash report" ></p>

<h3>使用 Xcode 对崩溃报告进行解析</h3>

<p>操作是打开 <code>Xcode &gt; Window &gt; Organizer</code>，上图：</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_05_25_xcode.png" title="Xcode View Crash Report" ></p>

<p>可以选择相应的 Crash 来进行查看了。</p>

<p>&lsquo;注意：'前提是在 <code>Xcode</code> 登录 Apple ID，才能看到线上 App 的崩溃报告。</p>

<h2>总结</h2>

<p>这就是几个具体追踪定位 Bug 的方法和技巧，当然，你也可以在 App 中自己加入抓去崩溃的功能，总之分析崩溃原因，越是把范围缩小，越容易发现问题，进而解决问题。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Git 代码库回滚记录]]></title>
        <link href="http://swplzj.github.io/blog/2016/04/19/git-dai-ma-ku-hui-gun-ji-lu/"/>
        <updated>2016-04-19T16:32:03+08:00</updated>
        <id>http://swplzj.github.io/blog/2016/04/19/git-dai-ma-ku-hui-gun-ji-lu</id>
        <content type="html"><![CDATA[<p>项目有了一些新需求，需要做代码更改了。Pull 下来代码，结果运行不了，最近项目更新不是很频繁，所以想到了使用 Git 代码库回滚，记录一下。代码库回滚可以包含本地带啊库回滚和远程代码库回滚，下面针对这两种情况做一下使用介绍。</p>

<!--more-->


<p>git 代码库回滚指的是将代码库某分支退回到以前的某个 <code>commit id</code></p>

<h3>本地代码库回滚</h3>

<p>找到你要回复到的版本的 <code>commit-id</code>，然后使用下面命令进行恢复。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard commit-id //回滚到commit-id，将commit-id之后提交的commit进行清除
</span><span class='line'>
</span><span class='line'>git reset --hard HEAD~3 //将最近3次的提交回滚</span></code></pre></td></tr></table></div></figure>


<p>本地代码库回滚之后，做了新的更改，然后需要提交到远程分支，提交之前你需要 pull，这样问题就出来了，你又会把坏的、不想要的代码合并过来，这时候就需要使用远程代码库回滚了。</p>

<h3>远程代码库回滚</h3>

<p>过程代码库回滚要比本地代码库回滚要复杂，但是原理其实比较简单：先将本地分支退回到某个commit，然后删除远程分支，最后重新push本地分支。</p>

<p>具体操作步骤：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1、git checkout the_branch
</span><span class='line'>
</span><span class='line'>2、git pull
</span><span class='line'>
</span><span class='line'>3、git reset --hard the_commit_id //把the_branch本地回滚到the_commit_id
</span><span class='line'>
</span><span class='line'>4、git push origin :the_branch //删除远程 the_branch(冒号前面的空格不能少，原理是把一个空分支push到server上，相当于删除该分支。)
</span><span class='line'>
</span><span class='line'>5、git push origin the_branch //用回滚后的本地分支重新建立远程分支
</span></code></pre></td></tr></table></div></figure>


<p>这样就算是解决了问题了，希望能帮助到你。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[在 Mac OS X 上安装 Scheme 环境]]></title>
        <link href="http://swplzj.github.io/blog/2016/04/12/zai-mac-os-x-shang-an-zhuang-scheme-huan-jing/"/>
        <updated>2016-04-12T15:24:43+08:00</updated>
        <id>http://swplzj.github.io/blog/2016/04/12/zai-mac-os-x-shang-an-zhuang-scheme-huan-jing</id>
        <content type="html"><![CDATA[<p>关于 SICP 这本书的讨论很多，该不该学就看自己决定，今天闲着无聊，就想学一下这本书，当然，首先还是配置运行环境，在折腾的过程中遇到一些问题，记录一下在 Mac OS X 上面安装 Scheme 的过程，或许其他人也会面临这样的问题，所以和大家分享一下学到的知识。</p>

<!--more-->


<h3>说在前面</h3>

<p>SICP 全称 Structure and Interpretation of Computer Programs，翻译过来叫《计算机程序的构造和解释》。SICP 要教你的不是那些细枝末节的东西，而是把你拉到一个极高的视角，一边分解程序，一边教你如何正确的构建和编写程序。具体来说，SCIP 教你如何熟练运用抽象以及程序如何运行。</p>

<h3>安装 Scheme 过程</h3>

<p>在安装过程中，遇到了其他安装不了的情况，现在就直奔主题，直接展示正确的安装方式。</p>

<h4>1. 下载并安装 MIT Scheme 程序</h4>

<p><a href="http://ftp.gnu.org/gnu/mit-scheme/stable.pkg/9.2/mit-scheme-9.2-i386.dmg">32-bit system</a></p>

<p><a href="http://ftp.gnu.org/gnu/mit-scheme/stable.pkg/9.2/mit-scheme-9.2-x86-64.dmg">64-bit system</a></p>

<p>在 Finder 中找到安装包，双击安装包就会在新窗口出现像下面的画面：</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_04_12_mit-scheme-dmg.png" title="/" ></p>

<p>你只需要拖拽 MIT/GNU Scheme.app 到 Applications 文件夹中，然后就会自动安装到你的系统里面。如果你以为到此就大功告成了，那么你大错特错了。当你打开该应用时，是没有任何反应的，莫着急，还需一步步来。</p>

<h4>2. 通过终端对 Scheme 来进行配置</h4>

<p>打开终端，然后运行下面的命令：</p>

<p><code>For 32-bit package:</code></p>

<pre><code>sudo ln -s /Applications/MIT\:GNU\ Scheme.app/Contents/Resources /usr/local/lib/mit-scheme-i386
</code></pre>

<p><code>For 64-bit package:</code></p>

<pre><code>sudo ln -s /Applications/MIT\:GNU\ Scheme.app/Contents/Resources /usr/local/lib/mit-scheme-x86-64
</code></pre>

<p>你需要输入你的管理员密码，然后再在终端输入下面命令：</p>

<p><code>For 32-bit package:</code></p>

<pre><code>sudo ln -s /usr/local/lib/mit-scheme-i386/mit-scheme /usr/bin/scheme
</code></pre>

<p><code>For 64-bit package:</code></p>

<pre><code>sudo ln -s /usr/local/lib/mit-scheme-x86-64/mit-scheme /usr/bin/scheme
</code></pre>

<p><code>注意：</code>
可能上面的命令执行不成功，不过没关系，还有替换方案，你可以将上面的 ‘/usr/bin/scheme' 修改为  ‘/usr/local/bin/scheme’，然后再试试。</p>

<h4>3. 开始使用 Scheme</h4>

<p>使用 Sublime Text 写了一个测试的Demo，然后跑一下：</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_04_12_use-mit-scheme.png" title="/" ></p>

<h3>写在后面</h3>

<p>生命在于折腾，喜欢折腾一些带给人美好的东西，无聊的时候虐一虐自己的大脑也是很有意思的，接下来要把 SICP 这本难啃的书啃完！祝福我自己。
希望对你有帮助。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[iOS App 使用 Icon 区分不同渠道版本]]></title>
        <link href="http://swplzj.github.io/blog/2016/03/24/ios-app-bu-tong-ban-ben-de-bu-tong-she-zhi/"/>
        <updated>2016-03-24T18:30:56+08:00</updated>
        <id>http://swplzj.github.io/blog/2016/03/24/ios-app-bu-tong-ban-ben-de-bu-tong-she-zhi</id>
        <content type="html"><![CDATA[<p>Hey, 今天有空就针对之前测试人员提出的一些建议进行了汇总，评估了哪些建议是有助于提高产品的体验的，所以就挑出其中一条进行了优化。原因：我们的应用有 OTA 内部测试版和 AppStore 正式发布版，但是是同一套图标和同一个名字，所以，只要测过我们应用的人，装过两个不同环境的应用之后，就对我们的 App 傻傻分不清楚了，对测试人员造成一定的困惑，所以，也就有了这篇文章，和这边文章背后的折腾&hellip;&hellip;</p>

<!--more-->


<h3>啰嗦一下 Bundle Identifier</h3>

<p>大家都知道 iOS 是根据 <code>Bundle Identifier</code>来区别 App 的，所以如果要在手机上同时安装同一款 App 看似不行的，但是你可以通过设置不同的 <code>Bundle Identifier</code> 来区分不同版本的，其实可以是同一个二进制文件。在安装一个程序时，系统是根据 <code>Bundle Identifier</code> 来判断是全新安装还是升级。</p>

<h3>折腾方法</h3>

<p>通过折腾，大概找到了两种方法来解决这个问题，原理还是不一样的，对象也是不一样的。</p>

<h4>一、通过添加不同的 <code>Build Configuration</code> 来实现</h4>

<p>我们的目的是在测试机上可以同时安装不同版本且是同一个应用，所以现在要做的就是正式版使用一个 <code>Bundle Identifier</code>，OTA 版本/ Debug 版本使用另一个 <code>Bundle Identifier</code>，假设 <code>AppStore</code> 版的 <code>Bundle Identifier</code> 是 &ldquo;com.mycompany.myapp"，OTA版的是 "com.mycompany.myapp-beta"。同时为了直观的区分两个App，一般也会使用两套图标, 假设 <code>AppStore</code> 版的图标名称为Icon.png, Icon@2x.png, OTA版是Icon-beta.png, <a href="&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#x49;&#x63;&#111;&#110;&#x2d;&#98;&#x65;&#116;&#x61;&#x40;&#x32;&#120;&#46;&#x70;&#x6e;&#103;&#x2e;">&#73;&#x63;&#x6f;&#110;&#x2d;&#x62;&#x65;&#116;&#97;&#x40;&#50;&#x78;&#x2e;&#x70;&#x6e;&#103;&#x2e;</a> 那如果做到自动化的配置呢？答案在Build设置(Build Setting)里。</p>

<h5>1. 添加 Build 配置</h5>

<p>默认Xcode会提供2个Build配置(Build Configuration)：Debug和Release，我们再加一个AppStore,三种不同的配置的作用也是不一样的：</p>

<ul>
<li>Debug： 用来直接连机调试</li>
<li>Release：用于发布OTA的测试版</li>
<li>AppStore：用户提交到AppStore</li>
</ul>


<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_04_11_add_configuration_rename.png" title="/" ></p>

<h5>2. 在添加 Build Setting 里添加自定义设置</h5>

<p>我们添加两个自定义的设置，一个命名为 <code>APP_ICON_NAME</code>, 另一个命名为<code>BUNDLE_IDENTIFIER_SUFFIX</code>，如下图这样设置：</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_04_11_add_user_defined.png" title="/" ></p>

<p><code>APP_ICON_NAME</code>用来定义图标的名称，<code>BUNDLE_IDENTIFIER_SUFFIX</code>用来定义 <code>Bundle Identifier</code>来区分不同的应用。</p>

<h5>3. 在Info.plist添加自定义的参数</h5>

<p>在Info.plist中修改 <code>Bundle Identifier</code> 和 <code>Icon</code> 图标名称，把 <code>Bundle identifier</code> 值设置为 <code>${BUNDLE_IDENTIFIER_SUFFIX}</code>。添加 <code>Icon file</code>将图标值设置为 <code>${APP_ICON_NAME}@2x.png</code>。</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_04_11_add_plist_defined.png" title="/" ></p>

<h5>4. 选择不同的配置进行打包发布</h5>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_04_11_select_different_config.png" title="/" >
现在我们就可以在Schema里选择使用不同的Build配置，比如选择Debug和Release配置来得到的安装包就可以用来上传到OTA进行测试；选择AppStore的自定义配置来打包，就可以用来提交到AppStore进行发布了。整个过程是自动化的，包括BundleId和图标文件的名称，当然，你也可以添加其他自定义的参数，比如 App 显示的名称之类的，添加与此类似。</p>

<h4>二、通过添加不同的 <code>Target</code> 编译方案来实现</h4>

<h5>0. 先简单介绍一下 Xcode 中 target 的概念</h5>

<p>苹果在文档中写道：</p>

<blockquote><p>Targets that define the products to build. A target organizes the files and instructions needed to build a product into a sequence of build actions that can be taken.”</p></blockquote>

<p>在 Xcode 的一个项目中，可以允许建立多个编译的 target，每个 target 代表着
最终编译出来的一个 App 文件，在每个 target 中，可以添加不同的编译源文件和资源文件。最终，通过我们在不同 target 之间，修改其 Copy Bundle Resources 和 Compile Sources 配置，使课程之间的差异性得到实现。</p>

<h5>1. 创建新的 target</h5>

<p>在Project Navigator面板中找到项目设置。在Targets区域，右键单击现有target，并选择Duplicate复制现有的target。</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_04_11_add_target.png" title="/" ></p>

<h5>2. 根据 target 设置不同的 Icon</h5>

<p>选择Assets.xcassets，并添加一个新的图标。右击icon> App Icons &amp; Launch Images > New iOS App Icon。将新图标重命名为“AppIcon-Debug”，然后添加自己的图片。</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_04_11_add_icon.png" title="/" ></p>

<p>接着选择不同的 App Icon，用来区分不同版本。</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_04_11_select_different_target.png" title="/" ></p>

<h5>3. 选择不同的 Scheme 进行编译打包</h5>

<p>现在我们就可以选择不同的 Target 来进行打包了，得到的 App 也是不一样的。</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_04_11_select_target_build.png" title="/" ></p>

<h3>总结</h3>

<p>以上两种方法的使用场景还是有所不同，在这就不在赘述。但不管使用上面哪种方法，应用的生产和开发版本将具有相同的基础代码，但可以有不同的图标，bundle ID，并指向不同的数据库。发布和提交过程非常简单。最重要的是，测试人员可以在同一设备上，安装应用程序的两个版本，所以他们完全清楚正在测试的是哪个版本。这也是此次折腾的目的所在啊。</p>

<p>Have fun！</p>

<p>参考文章：</p>

<p><a href="http://www.appcoda.com/using-xcode-targets/">How to Use Xcode Targets to Manage Development and Production Builds</a></p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[iPhone 上同步图书遇到的问题]]></title>
        <link href="http://swplzj.github.io/blog/2016/03/18/iphone-shang-tong-bu-tu-shu-yu-dao-de-wen-ti/"/>
        <updated>2016-03-18T15:59:40+08:00</updated>
        <id>http://swplzj.github.io/blog/2016/03/18/iphone-shang-tong-bu-tu-shu-yu-dao-de-wen-ti</id>
        <content type="html"><![CDATA[<p>前一段时间通过 iTunes 同步图书的时候，同步不成功，当时也没有在意，今天想把一些好的资料放到手机上看时，又遇到了这个问题，看来该解决了。。。</p>

<!--more-->


<h4>之前通过 iTunes 同步文件的步骤：</h4>

<pre><code>1. 把需要的 PDF 或者 iBooks 文件添加到 iTunes 库中；
2. 选择 iTunes 中的 Books
3. 选择需要同步的图书文件，然后同步就可以了；
</code></pre>

<h4>iTunes更新后，问题出现了</h4>

<p>也不知道更新了几个 OS 版本，更记不清楚 iTunes 的版本，现在需要同步图书的时候，第一步就出现了问题，添加的图书文件没有在 Books 中显示，而是在 Music 的播放列表中显示了，起初还以为是新版 iTunes 的 bug，然后仔细看了看，在 iTunes 中竟然把 Books 的功能去掉了&hellip; 有点不知所措</p>

<h4>解决方法</h4>

<p>后来想到了 Apple 专门用来管理图书的 iBooks 了，果然这里有答案。</p>

<p>操作步骤：</p>

<pre><code>1. 把需要同步的图书添加到 iBooks 库中；
2. 在 iTunes 中选中设备中的 Books；
3. 选择需要同步的图书，同步；
</code></pre>

<p>如此简单便捷。花了几分钟记录一下，希望能够帮助到你。:-D</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[CSS 学习笔记]]></title>
        <link href="http://swplzj.github.io/blog/2016/03/11/css-xue-xi-bi-ji/"/>
        <updated>2016-03-11T11:29:14+08:00</updated>
        <id>http://swplzj.github.io/blog/2016/03/11/css-xue-xi-bi-ji</id>
        <content type="html"><![CDATA[<h3>CSS 简介</h3>

<p>CSS 指层叠样式表 (Cascading Style Sheets)</p>

<!--more-->


<h4>多重样式将层叠为一个</h4>

<p>样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。</p>

<h4>层叠次序</h4>

<p>当同一个 HTML 元素被不止一个样式定义时，会使用哪个样式呢？
一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字 4 拥有最高的优先权。</p>

<ol>
<li>浏览器缺省设置</li>
<li>外部样式表</li>
<li>内部样式表（位于 <head> 标签内部）</li>
<li>内联样式（在 HTML 元素内部）</li>
</ol>


<p>因此，内联样式（在 HTML 元素内部）拥有最高的优先权，这意味着它将优先于以下的样式声明：<code>&lt;head&gt;</code> 标签中的样式声明，外部样式表中的样式声明，或者浏览器中的样式声明（缺省值）。</p>

<h3>基础语法</h3>

<p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。</p>

<pre><code>selector {declaration1; declaration2; ... declarationN }
</code></pre>

<p>选择器通常是您需要改变样式的 HTML 元素。</p>

<p>每条声明由一个属性和一个值组成。</p>

<p>属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。</p>

<pre><code>selector {property: value}
</code></pre>

<h4>值的不同写法和单位</h4>

<p>除了英文单词 red，我们还可以使用十六进制的颜色值 #ff0000：</p>

<pre><code>p { color: #ff0000; }
</code></pre>

<p>为了节约字节，我们可以使用 CSS 的缩写形式：</p>

<pre><code>p { color: #f00; }
</code></pre>

<p>我们还可以通过两种方法使用 RGB 值：</p>

<pre><code>p { color: rgb(255,0,0); }
p { color: rgb(100%,0%,0%); }
</code></pre>

<p><code>注意:</code>当使用 RGB 百分比时，即使当值为 0 时也要写百分比符号。</p>

<h4>记得写引号</h4>

<p><code>提示：</code>如果值为若干单词，则要给值加引号：</p>

<pre><code>p {font-family: "sans serif";}  
</code></pre>

<h4>多重声明：</h4>

<p><code>提示：</code>如果要定义不止一个声明，则需要用分号将每个声明分开。</p>

<p>多重声明时，应该在每行只描述一个属性，这样可以增强样式定义的可读性，就像这样：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p {
</span><span class='line'>  text-align: center;
</span><span class='line'>  color: black;
</span><span class='line'>  font-family: arial;
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<h4>空格和大小写</h4>

<p>大多数样式表包含不止一条规则，而大多数规则包含不止一个声明。多重声明和空格的使用使得样式表更容易被编辑：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>body {
</span><span class='line'>  color: #000;
</span><span class='line'>  background: #fff;
</span><span class='line'>  margin: 0;
</span><span class='line'>  padding: 0;
</span><span class='line'>  font-family: Georgia, Palatino, serif;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h3>高级语法</h3>

<h4>选择器的分组</h4>

<p>你可以对选择器进行分组，这样，被分组的选择器就可以分享相同的声明。用逗号将需要分组的选择器分开。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>h1,h2,h3,h4,h5,h6 {
</span><span class='line'>  color: green;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h4>继承及其问题</h4>

<p>根据 CSS，子元素从父元素继承属性。</p>

<h3>派生选择器</h3>

<p>通过依据元素在其位置的上下文关系来定义样式，你可以使标记更加简洁。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>li strong {
</span><span class='line'>    font-style: italic;
</span><span class='line'>    font-weight: normal;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>只有 li 元素中的 strong 元素的样式为斜体字，无需为 strong 元素定义特别的 class 或 id，代码更加简洁。</p>

<h3>id 选择器</h3>

<p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p>

<p>id 选择器以 &ldquo;#&rdquo; 来定义。</p>

<p><code>注意：</code>id 属性只能在每个 HTML 文档中出现一次.</p>

<p>在现代布局中，id 选择器常常用于建立派生选择器。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#sidebar p {
</span><span class='line'>  font-style: italic;
</span><span class='line'>  text-align: right;
</span><span class='line'>  margin-top: 0.5em;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<h4>一个选择器，多种用法</h4>

<p>即使被标注为 sidebar 的元素只能在文档中出现一次，这个 id 选择器作为派生选择器也可以被使用很多次：</p>

<h3>类选择器</h3>

<p><code>注意：</code>类名的第一个字符不能使用数字！</p>

<p>在 CSS 中，类选择器以一个点号显示：</p>

<pre><code>.center {text-align: center}
</code></pre>

<p>和 id 一样，class 也可被用作派生选择器：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.fancy td {
</span><span class='line'>  color: #f60;
</span><span class='line'>  background: #666;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>元素也可以基于它们的类而被选择：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>td.fancy {
</span><span class='line'>  color: #f60;
</span><span class='line'>  background: #666;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>属性选择器</h3>

<p>对带有指定属性的 HTML 元素设置样式。</p>

<p>可以为拥有指定属性的 HTML 元素设置样式，而不仅限于 class 和 id 属性。</p>

<p>下面的例子为带有 title 属性的所有元素设置样式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[title]
</span><span class='line'>{
</span><span class='line'>color:red;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>子选择器</h4>

<p>选择器子选择器，即大于符号(>),用于选择指定标签元素的第一代子元素。如右侧代码编辑器中的代码：</p>

<pre><code>.food&gt;li{border:1px solid red;}
</code></pre>

<h4>包含(后代)选择器</h4>

<p>即加入空格,用于选择指定标签元素下的后辈元素。如右侧代码编辑器中的代码：</p>

<pre><code>.first  span{color:red;}
</code></pre>

<h4>自选择器和包含选择器的区别</h4>

<p>请注意这个选择器与子选择器的区别，子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。而后代选择器是作用于所有子后代元素。后代选择器通过空格来进行选择，而子选择器是通过“>”进行选择。 <br/>
<code>总结：</code>>作用于元素的第一代后代，空格作用于元素的所有后代。</p>

<h4>通用选择器</h4>

<p>通用选择器是功能最强大的选择器，它使用一个（*）号指定，它的作用是匹配html中所有标签元素，如下使用下面代码使用html中任意标签元素字体颜色全部设置为红色：</p>

<pre><code>* {color:red;}
</code></pre>

<h4>伪类选择符</h4>

<p>伪类选择符，它允许给html不存在的标签（标签的某种状态）设置样式，比如说我们给html中一个标签元素的鼠标滑过的状态来设置字体颜色：</p>

<pre><code>a:hover{color:red;} 
</code></pre>

<h4>分组选择符</h4>

<p>当你想为html中多个标签元素设置同一个样式时，可以使用分组选择符（，），如下代码为右侧代码编辑器中的h1、span标签同时设置字体颜色为红色：</p>

<pre><code>h1,span{color:red;}
</code></pre>

<h4>权值规则</h4>

<p>标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。例如下面的代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>p{color:red;} /*权值为1*/
</span><span class='line'>p span{color:green;} /*权值为1+1=2*/
</span><span class='line'>.warning{color:white;} /*权值为10*/
</span><span class='line'>p span.warning{color:purple;} /*权值为1+1+10=12*/
</span><span class='line'>#footer .note p{color:yellow;} /*权值为100+10+1=111*/  </span></code></pre></td></tr></table></div></figure>


<h4>属性和值选择器 - 多个值</h4>

<p>下面的例子为包含指定值的 title 属性的所有元素设置样式。适用于由空格分隔的属性值：</p>

<pre><code>[title~=hello] { color:red; }
</code></pre>

<p>下面的例子为带有包含指定值的 lang 属性的所有元素设置样式。适用于由连字符分隔的属性值：</p>

<pre><code>[lang|=en] { color:red; }
</code></pre>

<h4>设置表单的样式</h4>

<p>属性选择器在为不带有 class 或 id 的表单设置样式时特别有用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>input[type="text"]
</span><span class='line'>{
</span><span class='line'>  width:150px;
</span><span class='line'>  display:block;
</span><span class='line'>  margin-bottom:10px;
</span><span class='line'>  background-color:yellow;
</span><span class='line'>  font-family: Verdana, Arial;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>input[type="button"]
</span><span class='line'>{
</span><span class='line'>  width:120px;
</span><span class='line'>  margin-left:35px;
</span><span class='line'>  display:block;
</span><span class='line'>  font-family: Verdana, Arial;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>为带有 target 属性的 <code>&lt;a&gt;</code> 元素设置样式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a[target]
</span><span class='line'>{ 
</span><span class='line'>background-color:yellow;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>为 target=&ldquo;_blank&rdquo; 的 <code>&lt;a&gt;</code> 元素设置样式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a[target=_blank]
</span><span class='line'>{ 
</span><span class='line'>background-color:yellow;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>选择 titile 属性包含单词 &ldquo;flower&rdquo; 的元素，并设置其样式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[title~=flower]
</span><span class='line'>{ 
</span><span class='line'>background-color:yellow;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>[attribute|=value]  用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。
选择 lang 属性值以 &ldquo;en&rdquo; 开头的元素，并设置其样式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[lang|=en]
</span><span class='line'>{ 
</span><span class='line'>background-color:yellow;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>[attribute^=value] 选择器匹配属性值以指定值开头的每个元素。</p>

<p>设置 class 属性值以 &ldquo;test&rdquo; 开头的所有 div 元素的背景色：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>div[class^="test"]
</span><span class='line'>{
</span><span class='line'>background:#ffff00;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>设置 class 属性值以 &ldquo;test&rdquo; 结尾的所有 div 元素的背景色：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>div[class$="test"]
</span><span class='line'>{
</span><span class='line'>background:#ffff00;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>    <br/>
设置 class 属性值包含 &ldquo;test&rdquo; 的所有 div 元素的背景色：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>div[class*="test"]
</span><span class='line'>{
</span><span class='line'>background:#ffff00;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>如何插入样式表</h3>

<h4>外部样式表</h4>

<p>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用 <code>&lt;link&gt;</code> 标签链接到样式表。<code>&lt;link&gt;</code> 标签在（文档的）头部：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;link rel="stylesheet" type="text/css" href="mystyle.css" /&gt;
</span><span class='line'>&lt;/head&gt;</span></code></pre></td></tr></table></div></figure>


<h4>内部样式表</h4>

<p>当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <code>&lt;style&gt;</code> 标签在文档头部定义内部样式表，就像这样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;style type="text/css"&gt;
</span><span class='line'>  hr {color: sienna;}
</span><span class='line'>  p {margin-left: 20px;}
</span><span class='line'>  body {background-image: url("images/back40.gif");}
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>&lt;/head&gt;</span></code></pre></td></tr></table></div></figure>


<h4>内联样式</h4>

<p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。</p>

<p>要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：</p>

<pre><code>&lt;p style="color: sienna; margin-left: 20px"&gt;
This is a paragraph
&lt;/p&gt;
</code></pre>

<h3>背景</h3>

<p>CSS 允许应用纯色作为背景，也允许使用背景图像创建相当复杂的效果。
CSS 在这方面的能力远远在 HTML 之上。</p>

<h3>格式化排版</h3>

<h4>段落排版&ndash;缩进</h4>

<pre><code>p{text-indent:2em;}
</code></pre>

<p>注意：2em的意思就是文字的2倍大小。</p>

<h4>段落排版&ndash;行间距（行高）</h4>

<pre><code>p{line-height:1.5em;}
</code></pre>

<h4>段落排版&ndash;中文字间距、字母间距</h4>

<pre><code>h1{
    letter-spacing:50px;
}
h1{
    word-spacing:50px;
}
</code></pre>

<h4>段落排版&ndash;对齐</h4>

<pre><code>h1{
    text-align:center;
}
</code></pre>

<h3>盒模型</h3>

<p>代码就是将内联元素a转换为块状元素，从而使a元素具有块状元素特点。</p>

<pre><code>a{display:block;}   
</code></pre>

<h4>块级元素特点：</h4>

<ol>
<li>每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）</li>
<li>元素的高度、宽度、行高以及顶和底边距都可设置。</li>
<li>元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。</li>
</ol>


<h4>内联元素特点：</h4>

<ol>
<li>和其他元素都在一行上；</li>
<li>元素的高度、宽度及顶部和底部边距不可设置；</li>
<li>元素的宽度就是它包含的文字或图片的宽度，不可改变。</li>
</ol>


<h3>盒模型</h3>

<h4>边框</h4>

<p>盒子模型的边框就是围绕着内容及补白的线，这条线你可以设置它的粗细、样式和颜色(边框三个属性)。</p>

<p>如下面代码为 div 来设置边框粗细为 2px、样式为实心的、颜色为红色的边框：</p>

<pre><code>div{
    border:2px  solid  red;
}
</code></pre>

<p>上面是 border 代码的缩写形式，可以分开写：</p>

<pre><code>div{
    border-width:2px;
    border-style:solid;
    border-color:red;
}
</code></pre>

<p>border-style（边框样式）常见样式有：</p>

<p>dashed（虚线）| dotted（点线）| solid（实线）。</p>

<h5>标签单独设置下边框</h5>

<p>div{border-bottom:1px solid red;}</p>

<h4>宽度和高度</h4>

<p>因此一个元素实际宽度（盒子的宽度）=左边界+左边框+左填充+内容宽度+右填充+右边框+右边界。</p>

<h4>填充</h4>

<p>元素内容与边框之间是可以设置距离的，称之为“填充”。填充也可分为上、右、下、左(顺时针)。如下代码：</p>

<pre><code>div{padding:20px 10px 15px 30px;}
</code></pre>

<h4>边界</h4>

<p>元素与其它元素之间的距离可以使用边界（margin）来设置。边界也是可分为上、右、下、左。如下代码：</p>

<pre><code>div{margin:20px 10px 15px 30px;}    
</code></pre>

<h3>布局模型</h3>

<p>CSS包含3种基本的布局模型，用英文概括为：Flow、Layer 和 Float。
在网页中，元素有三种布局模型：</p>

<ol>
<li>流动模型（Flow）</li>
<li>浮动模型 (Float)</li>
<li>层模型（Layer）</li>
</ol>


<h4>层模型有三种形式：</h4>

<ol>
<li>绝对定位(position: absolute)</li>
<li>相对定位(position: relative)</li>
<li>固定定位(position: fixed)</li>
</ol>


<h3>盒模型代码简写</h3>

<p>盒模型外边距(margin)、内边距(padding)和边框(border)设置上下左右四个方向的边距是按照顺时针方向设置的：上右下左</p>

<h4>通常有下面三种缩写方法:</h4>

<p>1、如果top、right、bottom、left的值相同，如下面代码：</p>

<pre><code>margin:10px 10px 10px 10px;
</code></pre>

<p>可缩写为：</p>

<pre><code>margin:10px;
</code></pre>

<p>2、如果top和bottom值相同、left和 right的值相同，如下面代码：</p>

<pre><code>margin:10px 20px 10px 20px;
</code></pre>

<p>可缩写为：</p>

<pre><code>margin:10px 20px;
</code></pre>

<p>3、如果left和right的值相同，如下面代码：</p>

<pre><code>margin:10px 20px 30px 20px;
</code></pre>

<p>可缩写为：</p>

<pre><code>margin:10px 20px 30px;
</code></pre>

<p><code>注意：</code>padding、border的缩写方法和margin是一致的。</p>

<h4>颜色值缩写</h4>

<p>当你设置的颜色是16进制的色彩值时，如果每两位的值相同，可以缩写一半。</p>

<p>例子1：</p>

<pre><code>p{color:#000000;}
</code></pre>

<p>可以缩写为：</p>

<pre><code>p{color: #000;} 
</code></pre>

<h4>字体缩写</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>body{
</span><span class='line'>    font-style:italic;
</span><span class='line'>    font-variant:small-caps; 
</span><span class='line'>    font-weight:bold; 
</span><span class='line'>    font-size:12px; 
</span><span class='line'>    line-height:1.5em; 
</span><span class='line'>    font-family:"宋体",sans-serif;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这么多行的代码其实可以缩写为一句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>body{
</span><span class='line'>    font:italic  small-caps  bold  12px/1.5em  "宋体",sans-serif;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>单位值</h3>

<h4>颜色值</h4>

<p>1、英文命令颜色</p>

<pre><code>p{color:red;}
</code></pre>

<p>2、RGB颜色</p>

<p>这个与 photoshop 中的 RGB 颜色是一致的，由 R(red)、G(green)、B(blue) 三种颜色的比例来配色。</p>

<pre><code>p{color:rgb(133,45,200);}
</code></pre>

<p>每一项的值可以是 0~255 之间的整数，也可以是 0%~100% 的百分数。如：</p>

<pre><code>p{color:rgb(20%,33%,25%);}
</code></pre>

<p>3、十六进制颜色</p>

<p>这种颜色设置方法是现在比较普遍使用的方法，其原理其实也是 RGB 设置，但是其每一项的值由 0-255 变成了十六进制 00-ff。</p>

<pre><code>p{color:#00ffff;}
</code></pre>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2016_03_10_color_sheet.gif"></p>

<h4>长度值</h4>

<p>1、像素
像素为什么是相对单位呢？因为像素指的是显示器上的小点。</p>

<p>2、em
就是本元素给定字体的 font-size 值，如果元素的 font-size 为 14px ，那么 1em = 14px；如果 font-size 为 18px，那么 1em = 18px。如下代码：</p>

<pre><code>p{font-size:12px;text-indent:2em;}
</code></pre>

<p>3、百分比</p>

<p>p{font-size:12px;line-height:130%}
设置行高（行间距）为字体的130%（12 * 1.3 = 15.6px）。</p>

<h3>小技巧</h3>

<h4>居中设置</h4>

<p>如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 text-align:center 来实现的。如下代码：
html代码：</p>

<pre><code>&lt;body&gt;
  &lt;div class="txtCenter"&gt;我是文本，哈哈，我想要在父容器中水平居中显示。&lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p>css代码：</p>

<pre><code>&lt;style&gt;
  div.txtCenter{
    text-align:center;
  }
&lt;/style&gt;
</code></pre>

<h4>水平居中设置-定宽块状元素</h4>

<p>满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。我们来看个例子就是设置 div 这个块状元素水平居中：</p>

<p>html代码：</p>

<pre><code>&lt;body&gt;
  &lt;div&gt;我是定宽块状元素，哈哈，我要水平居中显示。&lt;/div&gt;
&lt;/body&gt;
</code></pre>

<p>css代码：</p>

<pre><code>&lt;style&gt;
div{
    border:1px solid red;/*为了显示居中效果明显为 div 设置了边框*/

    width:500px;/*定宽*/
    margin:20px auto;/* margin-left 与 margin-right 设置为 auto */
}

&lt;/style&gt;
</code></pre>

<h4>水平居中总结-不定宽块状元素方法</h4>

<p>不定宽度的块状元素有三种方法居中（这三种方法目前使用的都比多）：</p>

<ol>
<li>加入 table 标签</li>
<li>设置 display;inline 方法</li>
<li>设置 position:relative 和 left:50%;</li>
</ol>


<h4>垂直居中-父元素高度确定的单行文本</h4>

<p>父元素高度确定的单行文本的竖直居中的方法是通过设置父元素的 height 和 line-height 高度一致来实现的</p>

<h4>垂直居中-父元素高度确定的多行文本</h4>

<p>父元素高度确定的多行文本、图片、块状元素的竖直居中的方法：</p>

<p>使用插入 table (包括tbody、tr、td)标签，同时设置 vertical-align：middle。</p>

<h4>隐性改变display类型</h4>

<h3>后记</h3>

<p>简单的学习了一遍 CSS， 还需要大量练习，继续努力吧，只有不敢想，没有做不到。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[HTML 学习笔记]]></title>
        <link href="http://swplzj.github.io/blog/2016/03/09/html-xue-xi-bi-ji/"/>
        <updated>2016-03-09T13:54:31+08:00</updated>
        <id>http://swplzj.github.io/blog/2016/03/09/html-xue-xi-bi-ji</id>
        <content type="html"><![CDATA[<p>最新项目提交到 AppStore，等待审核过程中，有空学习点 HTML 知识，顺便做了一下笔记，其实之前也学习过网页设计，但是没有系统的学习，现在，我只想说：I am back&hellip; 要重新系统的学习一遍，学以致用，再对自己的 Blog 完美升级，期待中&hellip;</p>

<!--more-->


<h3>HTML 属性</h3>

<p>属性为 HTML 元素提供附加信息。
属性总是以名称/值对的形式出现，比如：name=&ldquo;value"。
属性总是在 HTML 元素的开始标签中规定。</p>

<h5>lang 属性</h5>

<p>文档语言可以在 <html> 标签中来声明，语言声明使用 <code>lang</code> 属性。
声明语言对屏幕阅读器（供盲人使用的软件）和搜索引擎都是很重要的。</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang="en-US"&gt;
&lt;body&gt;

&lt;h1&gt;My First Heading&lt;/h1&gt;
&lt;p&gt;My first paragraph.&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h5>标题属性</h5>

<p>HTML 中段落用 <code>&lt;p&gt;</code>标签定义。
可以给段落添加 <code>title</code> 属性，当鼠标放到段落上时，就会出现标题。</p>

<pre><code>&lt;p title="About W3Schools"&gt;
W3Schools is a web developer's site.
It provides tutorials and references covering
many aspects of web programming,
including HTML, CSS, JavaScript, XML, SQL, PHP, ASP, etc.
&lt;/p&gt;
</code></pre>

<h5>超链接属性</h5>

<p>HTML 链接用 <code>&lt;a&gt;</code> 来定义，链接地址可以在 <code>href</code> 属性中具体说明。</p>

<pre><code>&lt;a href="http://www.baidu.com"&gt;这是一个链接&lt;/a&gt;
</code></pre>

<h5>尺寸属性</h5>

<p>图片可以使用 <code>&lt;img&gt;</code> 标签来定义。
在图片标签中提供资源的文件名称（src）和图片的尺寸（width 和 height）等属性。</p>

<pre><code>&lt;img src="demo.jpg" width="100" height="200"&gt;
</code></pre>

<h5>alt属性</h5>

<p>当HTML中图片没有被显示的时候，可以使用 <code>alt</code> 属性来设置可供替换的文本。</p>

<h5>align对齐方式</h5>

<pre><code>&lt;h1 align="center"&gt;This is a heading 1&lt;/h1&gt;
</code></pre>

<h5>bgcolor背景颜色</h5>

<pre><code>&lt;body bgcolor="yellow"&gt;
</code></pre>

<h5>border 表格边框</h5>

<p><code>HTML 提示：</code>使用小写属性，始终为属性值加引号。</p>

<p>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。
在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，</p>

<pre><code>name='Say "HelloWorld", Tom'
</code></pre>

<h3>HTML 标题</h3>

<h5>水平线</h5>

<p><code>&lt;hr /&gt;</code> 标签在 HTML 页面中创建水平线。
hr 元素可用于分隔内容。</p>

<p>标题很重要。</p>

<p>请确保将 HTML heading 标签只用于标题。不要仅仅是为了产生粗体或大号的文本而使用标题。</p>

<p>搜索引擎使用标题为您的网页的结构和内容编制索引。</p>

<p>因为用户可以通过标题来快速浏览您的网页，所以用标题来呈现文档结构是很重要的。
应该将 h1 用作主标题（最重要的），其后是 h2（次重要的），再其次是 h3，以此类推。</p>

<h5>注释</h5>

<pre><code>&lt;!-- This is a comment --&gt;
</code></pre>

<h3>HTML 段落</h3>

<pre><code>&lt;p&gt;This is a paragraph&lt;/p&gt;
</code></pre>

<p><code>注释</code>：浏览器会自动地在段落的前后添加空行。（<p> 是块级元素）</p>

<p><code>提示</code>：使用空的段落标记 <p></p> 去插入一个空行是个坏习惯。用 <br /> 标签代替它！（但是不要用 <br /> 标签去创建列表。）</p>

<p><code>提示</code>：通过结束标签来关闭 HTML 是一种经得起未来考验的 HTML 编写方法。清楚地标记某个元素在何处开始，并在何处结束，不论对您还是对浏览器来说，都会使代码更容易理解。</p>

<h5>HTML 折行</h5>

<pre><code>&lt;p&gt;This is&lt;br /&gt;a para&lt;br /&gt;graph with line breaks&lt;/p&gt;
</code></pre>

<p><code>&lt;br&gt; 还是 &lt;br /&gt;</code></p>

<p>您也许发现 <code>&lt;br&gt;</code> 与 <code>&lt;br /&gt;</code> 很相似。
在 XHTML、XML 以及未来的 HTML 版本中，不允许使用没有结束标签（闭合标签）的 HTML 元素。
即使 <code>&lt;br&gt;</code> 在所有浏览器中的显示都没有问题，使用 <code>&lt;br /&gt;</code> 也是更长远的保障。</p>

<h3>HTML 格式化</h3>

<h4>文本格式化</h4>

<pre><code>&lt;html&gt;

&lt;body&gt;

&lt;b&gt;This text is bold&lt;/b&gt;
&lt;br /&gt;
&lt;b&gt;这是一个加粗的文本 &lt;/b&gt;
&lt;br /&gt;

&lt;strong&gt;This text is strong&lt;/strong&gt;

&lt;br /&gt;

&lt;strong&gt;这是一个加重语气的文本&lt;/strong&gt;
&lt;br /&gt;

&lt;big&gt;This text is big&lt;/big&gt;

&lt;br /&gt;

&lt;big&gt;这是一个big字体&lt;/big&gt;
&lt;br /&gt;

&lt;em&gt;This text is emphasized&lt;/em&gt;

&lt;br /&gt;

&lt;em&gt;这是一个强调的文本&lt;/em&gt;
&lt;br /&gt;

&lt;i&gt;This text is italic&lt;/i&gt;

&lt;br /&gt;

&lt;i&gt;这是斜体文本&lt;/i&gt;

&lt;br /&gt;

&lt;small&gt;This text is small&lt;/small&gt;

&lt;br /&gt;

&lt;small&gt;这是small 字体&lt;/small&gt;

&lt;br /&gt;

This text contains
&lt;sub&gt;subscript&lt;/sub&gt;


&lt;sub&gt;这是下标&lt;/sub&gt;

&lt;br /&gt;

This text contains
&lt;sup&gt;superscript&lt;/sup&gt;
&lt;sup&gt;这是上标&lt;/sup&gt;

&lt;br /&gt;

3&lt;sup&gt;2&lt;/sup&gt;
&lt;br /&gt;

&lt;b&gt;&lt;big&gt;3&lt;/big&gt;&lt;/b&gt;&lt;sub&gt;万&lt;/sub&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h4>预格式文本</h4>

<p><code>&lt;pre&gt;</code>预格式标签，保留了空格和换行</p>

<pre>这是
预格式文本。
它保留了 空格 和
换行</pre>




<p>pre 标签很适合计算机代码显示</p>


<pre><code>&lt;pre&gt;
for i = 1 to 10
    print i
next i
&lt;/pre&gt;
</code></pre>

<h4>计算机输出标签</h4>

<pre><code>&lt;code&gt; Computer code &lt;/code&gt;
&lt;br /&gt;
&lt;kbd&gt;Keyboard input&lt;/kbd&gt;
&lt;br /&gt;
&lt;tt&gt;Teletype text&lt;/tt&gt;
&lt;br /&gt;
&lt;samp&gt;Sample text&lt;/samp&gt;
&lt;br /&gt;
&lt;var&gt;Computer variable&lt;/var&gt;
&lt;br /&gt;
</code></pre>

<h4>地址标签</h4>

<pre><code>&lt;address&gt;
Written by &lt;a href="mailto:swplzj@163.com"&gt;Leo&lt;/a&gt;
&lt;br /&gt;
Visit me at:
&lt;br /&gt;
&lt;a href="http://swplzj.github.io"&gt;swplzj.github.io&lt;/a&gt;
&lt;br /&gt;
ShiLiPu, ChaoYang, Beijing
&lt;br /&gt;
China
&lt;/address&gt;
</code></pre>

<h4>缩写和首字母缩写</h4>

<pre><code>&lt;abbr title="etcetera"&gt;etc.定义缩写&lt;/abbr&gt;

&lt;br /&gt;
&lt;acronym title="World Wide Web"&gt;WWW（定义首字母缩写）&lt;/acronym&gt;
&lt;p&gt;在某些浏览器中，当您把鼠标移至缩略词语上时，title 可用于展示表达的完整版本。&lt;/p&gt;

&lt;p&gt;仅对于 IE 5 中的 acronym 元素有效。&lt;/p&gt;

&lt;p&gt;对于 Netscape 6.2 中的 abbr 和 acronym 元素都有效。&lt;/p&gt;
</code></pre>

<h4>文本方向</h4>

<pre><code>&lt;p&gt;
如果你的浏览器支持 bi-directional override (bdo), 下一行会从右向左输出&lt;rtl&gt;
&lt;/p&gt;
&lt;bdo dir="rtl"&gt;从右向左读&lt;/bdo&gt;
</code></pre>

<h4>块引用</h4>

<pre><code>这是长的引用：
&lt;blockquote&gt;    
这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。这是长的引用。
&lt;/blockquote&gt;

这是短的引用。
&lt;q&gt;
这是短的引用。
&lt;/q&gt;
</code></pre>

<p>cite 引用</p>

<pre><code>&lt;cite&gt;  这是引用&lt;/cite&gt;

&lt;dfn&gt;定义一个定义项目&lt;/dfn&gt;
</code></pre>

<h4>删除字效果和插入字效果</h4>

<pre><code>&lt;p&gt; 
一打有&lt;del&gt;二十&lt;/del&gt;&lt;ins&gt;十二&lt;/ins&gt;件
&lt;/p&gt;
</code></pre>

<h3>样式</h3>

<p>如何使用样式</p>

<pre><code>1. 外部样式表；
当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。
2. 内部样式表；
当单个文件需要特别样式时，就可以使用内部样式表。你可以在 head 部分通过 &lt;style&gt; 标签定义内部样式表。
3. 内联样式；  
当特殊的样式需要应用到个别元素时，就可以使用内联样式。 使用内联样式的方法是在相关的标签中使用样式属性。样式属性可以包含任何 CSS 属性
</code></pre>

<h4>使用添加到 <head> 部分的样式信息对 HTML 进行格式化。</h4>

<pre><code>&lt;html&gt;  

&lt;head&gt;
&lt;style type="text/css"&gt;
h1 {color: red}
p {color: blue}
&lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;h1&gt;标题&lt;/h1&gt;
&lt;p&gt;段落&lt;/p&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>

<h4>使用样式属性做一个没有下划线的链接。</h4>

<pre><code>&lt;a href="http://swplzj.github.io" style="text-decoration: none" &gt;这是我的网址(不带下划线的链接)&lt;/a&gt;   
</code></pre>

<h4>使用 <link> 标签链接到一个外部样式表。</h4>

<pre><code>    &lt;link rel="stylesheet" type="text/css" href="csstest1.css"&gt;
</code></pre>

<h3>HTML 链接</h3>

<h4>将图像作为链接</h4>

<pre><code>&lt;a href="http://swplzj.github.io"&gt;
&lt;img src="2.gif" title="Leo"&gt; &lt;/img&gt;
&lt;/a&gt;    
</code></pre>

<p>有两种使用 <code>&lt;a&gt;</code> 标签的方式：</p>

<pre><code>1. 通过使用 href 属性 - 创建指向另一个文档的链接
2. 通过使用 name 属性 - 创建文档内的书签  
</code></pre>

<h5>target属性</h5>

<p>使用 Target 属性，你可以定义被链接的文档在何处显示。</p>

<pre><code>&lt;a href="http://swplzj.github.io" target="_blank"&gt;Leo's Blog”&lt;/a&gt;
</code></pre>

<h5>name属性</h5>

<p>name 属性规定锚（anchor）的名称。</p>

<p><a href="#tips01">锚点定义</a></p>

<pre><code>&lt;a name="label"&gt;锚（显示在页面上的文本）&lt;/a&gt;
</code></pre>

<p><code>提示</code>：锚的名称可以是任何你喜欢的名字。您可以使用 id 属性来替代 name 属性，命名锚同样有效。</p>

<pre><code>&lt;a href="http://www.w3school.com.cn/html/html_links.asp#tips"&gt;有用的提示&lt;/a&gt;
</code></pre>

<p>在上面的代码中，我们将 # 符号和锚名称添加到 URL 的末端，就可以直接链接到 tips 这个命名锚了。</p>

<h3>图像</h3>

<h4>插入图像</h4>

<p><code>&lt;img&gt;</code> 是空标签，意思是说，它只包含属性，并且没有闭合标签。</p>

<h5>替换文本属性（Alt）</h5>

<pre><code>&lt;img src="boat.gif" alt="Big Boat"&gt;
</code></pre>

<h4>从不同的位置插入图片</h4>

<pre><code>&lt;p&gt;这是插入图片&lt;img src="1.png"&gt;的段落&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;这是上对齐&lt;img src="1.png" align="top"&gt;插入图片&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;这是居中对齐的&lt;img src="1.png" align="center"&gt;插入图片&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;这是下对齐的&lt;img src="1.png" align="bottom"&gt;插入图片&lt;/p&gt;
</code></pre>

<h4>浮动图像</h4>

<pre><code>&lt;p&gt;这是下对齐的&lt;img src="1.png" align="right"&gt;插入图片&lt;/p&gt;            
</code></pre>

<h4>把图像转换为图像映射</h4>

<pre><code>&lt;p&gt;请点击图片中的星球，把它放大&lt;/p&gt;
        &lt;img src="image/eg_planets.jpg" border="0" usemap="#planetmap" alt="Planets" /&gt;
        &lt;map name="planetmap" id="planetmap"&gt;

        &lt;area shape="circle" coords="180,139,14" href="image/venus.html" target="_blank" alt="Venus" /&gt; 
        &lt;area shape="circle" coords="129,161,10" href="image/" /&gt;
        &lt;area shape="rect" coords="0,0,110,260" href="image/sun.html" target="_blank" alt="Sun" /&gt;
        &lt;/map&gt;
</code></pre>

<h3>表格</h3>

<p>表格由 <code>&lt;table&gt;</code> 标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt;</code> 标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p>

<h5>表格和边框属性</h5>

<pre><code>&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;Row 1, cell 1&lt;/td&gt;
&lt;td&gt;Row 1, cell 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</code></pre>

<h5>表格的表头</h5>

<p>表格的表头使用 <code>&lt;th&gt;</code> 标签进行定义。
大多数浏览器会把表头显示为粗体居中的文本：</p>

<h5>表格中的空单元格</h5>

<p><code>注意</code>：这个空的单元格的边框没有被显示出来。为了避免这种情况，在空单元格中添加一个空格占位符，就可以将边框显示出来。</p>

<pre><code>&lt;table border="1"&gt;
&lt;tr&gt;
&lt;td&gt;row 1, cell 1&lt;/td&gt;
&lt;td&gt;row 1, cell 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;row 2, cell 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</code></pre>

<h5>Cell padding 和 Cell spacing 的区别</h5>

<p>使用 Cell padding 来创建单元格内容与其边框之间的空白。<br/>
使用 Cell spacing 增加单元格之间的距离。</p>

<h5>caption 标签</h5>

<p>caption 元素定义表格标题。
caption 标签必须紧随 table 标签之后。您只能对每个表格定义一个标题。通常这个标题会被居中于表格之上。</p>

<pre><code>&lt;table border="1"&gt;
  &lt;caption&gt;Monthly savings&lt;/caption&gt;
  &lt;tr&gt;
    &lt;th&gt;Month&lt;/th&gt;
    &lt;th&gt;Savings&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;January&lt;/td&gt;
    &lt;td&gt;$100&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</code></pre>

<h5>thead 元素应该与 tbody 和 tfoot 元素结合起来使用。</h5>

<p><thead> 标签定义表格的表头。该标签用于组合 HTML 表格的表头内容。</p>

<p>tbody 元素用于对 HTML 表格中的主体内容进行分组，而 tfoot 元素用于对 HTML 表格中的表注（页脚）内容进行分组。</p>

<pre><code>&lt;table border="1"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Month&lt;/th&gt;
      &lt;th&gt;Savings&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;

  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;td&gt;Sum&lt;/td&gt;
      &lt;td&gt;$180&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;

  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;January&lt;/td&gt;
      &lt;td&gt;$100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;February&lt;/td&gt;
      &lt;td&gt;$80&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;    
</code></pre>

<h5>col 标签</h5>

<pre><code>&lt;table width="100%" border="1"&gt;
  &lt;col align="left" /&gt;
  &lt;col align="left" /&gt;
  &lt;col align="right" /&gt;
  &lt;tr&gt;
    &lt;th&gt;ISBN&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Price&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3476896&lt;/td&gt;
    &lt;td&gt;My first HTML&lt;/td&gt;
    &lt;td&gt;$53&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</code></pre>

<h5>colgroup标签</h5>

<pre><code>&lt;table width="100%" border="1"&gt;
  &lt;colgroup span="2" align="left"&gt;&lt;/colgroup&gt;
  &lt;colgroup align="right" style="color:#0000FF;"&gt;&lt;/colgroup&gt;
  &lt;tr&gt;
    &lt;th&gt;ISBN&lt;/th&gt;
    &lt;th&gt;Title&lt;/th&gt;
    &lt;th&gt;Price&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;3476896&lt;/td&gt;
    &lt;td&gt;My first HTML&lt;/td&gt;
    &lt;td&gt;$53&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</code></pre>

<h3>列表</h3>

<h4>定义列表</h4>

<p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。
自定义列表以 <code>&lt;dl&gt;</code> （“definition list”）标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code>(“definition title”，定义标题) 开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code>(“definition description”，定义描述) 开始。</p>

<pre><code>&lt;dl&gt;
&lt;dt&gt;Coffee&lt;/dt&gt;
&lt;dd&gt;Black hot drink&lt;/dd&gt;
&lt;dt&gt;Milk&lt;/dt&gt;
&lt;dd&gt;White cold drink&lt;/dd&gt;
&lt;/dl&gt;   
</code></pre>

<h3>块</h3>

<p>可以通过 <code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code> 将 HTML 元素组合起来。</p>

<p>块级元素在浏览器显示时，通常会以新行来开始（和结束）。</p>

<h5>HTML 内联元素</h5>

<p>内联元素在显示时通常不会以新行开始。
例子：<code>&lt;b&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code></p>

<h5>HTML <code>&lt;div&gt;</code> 元素</h5>

<p>HTML <code>&lt;div&gt;</code> 元素是块级元素，它是可用于组合其他 HTML 元素的容器。DIV（division）   <code>&lt;div&gt;</code> 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 <code>&lt;table&gt;</code> 元素进行文档布局不是表格的正确用法。<code>&lt;table&gt;</code> 元素的作用是显示表格化的数据。</p>

<h5>HTML <code>&lt;span&gt;</code> 元素</h5>

<p>HTML <code>&lt;span&gt;</code> 元素是内联元素，可用作文本的容器。
<code>&lt;span&gt;</code> 元素可用于为部分文本设置样式属性。</p>

<h3>布局</h3>

<p>提示：即使可以使用 HTML 表格来创建漂亮的布局，但设计表格的目的是呈现表格化数据 - 表格不是布局工具！</p>

<h3>表单</h3>

<h4>文本域 (Text field)</h4>

<h4>密码域</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;form&gt;
</span><span class='line'>  用户名：
</span><span class='line'>  &lt;input type="text" name="username"&gt;&lt;/input&gt;
</span><span class='line'>  &lt;br /&gt;
</span><span class='line'>
</span><span class='line'>  密码：
</span><span class='line'>  &lt;input type="password"&gt;&lt;/input&gt;
</span><span class='line'>  &lt;br /&gt;
</span><span class='line'>
</span><span class='line'>  性别：
</span><span class='line'>  &lt;input type="radio" name="sex" checked="checked" value="male"&gt;男&lt;/input&gt;
</span><span class='line'>  &lt;input type="radio" name="sex" value="female"&gt;女&lt;/input&gt;
</span><span class='line'>  &lt;br /&gt;
</span><span class='line'>
</span><span class='line'>  &lt;fieldset&gt;
</span><span class='line'>      &lt;legend&gt;健康信息&lt;/legend&gt;
</span><span class='line'>      身高：&lt;input type="text"&gt;&lt;/input&gt;
</span><span class='line'>      体重：&lt;input type="text"&gt;&lt;/input&gt;
</span><span class='line'>  &lt;/fieldset&gt;
</span><span class='line'>  &lt;br /&gt;
</span><span class='line'>
</span><span class='line'>  兴趣：
</span><span class='line'>  &lt;input type="checkbox" value="sing"&gt;喜欢唱歌&lt;/input&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;input type="checkbox" value="dance"&gt;喜欢跳舞&lt;/input&gt;
</span><span class='line'>  &lt;br /&gt;
</span><span class='line'>
</span><span class='line'>  拥有车辆：
</span><span class='line'>  &lt;select name="cars"&gt;
</span><span class='line'>      &lt;optgroup label="豪车"&gt;
</span><span class='line'>      &lt;option value="audi"&gt;Audi&lt;/option&gt;
</span><span class='line'>      &lt;option value="bezi"&gt;Bezi&lt;/option&gt;  
</span><span class='line'>      &lt;/optgroup&gt;
</span><span class='line'>      &lt;optgroup label="好车"&gt;
</span><span class='line'>      &lt;option value="bmw" selected="selected"&gt;BMW&lt;/option&gt;
</span><span class='line'>      &lt;option value="volvo"&gt;volvo&lt;/option&gt;    
</span><span class='line'>      &lt;/optgroup&gt;
</span><span class='line'>      
</span><span class='line'>  &lt;/select&gt;
</span><span class='line'>
</span><span class='line'>  &lt;br /&gt;
</span><span class='line'>
</span><span class='line'>  自我评价：
</span><span class='line'>  &lt;br /&gt;
</span><span class='line'>  &lt;textarea rows="10" cols="30"&gt;写下对自己最公正的评价...&lt;/textarea&gt;
</span><span class='line'>
</span><span class='line'>  &lt;br /&gt;
</span><span class='line'>  &lt;input type="submit" value="提交"&gt;&lt;/input&gt;
</span><span class='line'>
</span><span class='line'>  &lt;hr /&gt;
</span><span class='line'>
</span><span class='line'>  &lt;form action="MAILTO:swplzj@163.com" method="post" enctype="text/plain"&gt;
</span><span class='line'>      请填写相关信息，发送邮件
</span><span class='line'>      &lt;br /&gt;
</span><span class='line'>      姓名：
</span><span class='line'>      &lt;br /&gt;
</span><span class='line'>      &lt;input type="text"&gt;
</span><span class='line'>      &lt;br /&gt;
</span><span class='line'>      电子邮箱：
</span><span class='line'>      &lt;br /&gt;
</span><span class='line'>      &lt;input type="text"&gt;
</span><span class='line'>      &lt;br /&gt;
</span><span class='line'>      内容：
</span><span class='line'>      &lt;br /&gt;
</span><span class='line'>      &lt;input type="text"&gt;
</span><span class='line'>      &lt;br /&gt;
</span><span class='line'>      &lt;input type="submit" value="发送"&gt;
</span><span class='line'>      &lt;input type="reset" value="重置"&gt;
</span><span class='line'>  &lt;/form&gt;
</span><span class='line'>&lt;/form&gt;</span></code></pre></td></tr></table></div></figure>


<h3>框架</h3>

<h4>垂直框架</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>
</span><span class='line'>&lt;frameset cols="25%,50%,25%"&gt;
</span><span class='line'>
</span><span class='line'>  &lt;frame src="http://swplzj.github.io/example/html/frame_a.html"&gt;
</span><span class='line'>  &lt;frame src="http://swplzj.github.io/example/html/frame_b.html"&gt;
</span><span class='line'>  &lt;frame src="http://swplzj.github.io/example/html/frame_c.html"&gt;
</span><span class='line'>
</span><span class='line'>&lt;/frameset&gt;
</span><span class='line'>
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h4>水平框架 &amp; noframes</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>
</span><span class='line'>&lt;frameset rows="25%,50%,25%"&gt;
</span><span class='line'>
</span><span class='line'>  &lt;frame src="http://swplzj.github.io/example/html/frame_a.html"&gt;
</span><span class='line'>  &lt;frame src="http://swplzj.github.io/example/html/frame_b.html"&gt;
</span><span class='line'>  &lt;frame src="http://swplzj.github.io/example/html/frame_c.html"&gt;
</span><span class='line'>
</span><span class='line'>&lt;noframes&gt;
</span><span class='line'>&lt;body&gt;您的浏览器无法处理框架！&lt;/body&gt;
</span><span class='line'>&lt;/noframes&gt;
</span><span class='line'>&lt;/frameset&gt;
</span><span class='line'>
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<h4>框架结构标签（frameset）</h4>

<p>框架结构标签（frameset）定义如何将窗口分割为框架
每个 frameset 定义了一系列行或列
rows/columns 的值规定了每行或每列占据屏幕的面积</p>

<p><code>重要提示：</code>
不能将 <code>&lt;body&gt;&lt;/body&gt;</code> 标签与 <code>&lt;frameset&gt;&lt;/frameset&gt;</code> 标签同时使用！不过，假如你添加包含一段文本的 <code>&lt;noframes&gt;</code> 标签，就必须将这段文字嵌套于 <code>&lt;body&gt;&lt;/body&gt;</code> 标签内。（在下面的第一个实例中，可以查看它是如何实现的。）</p>

<h4>混合框架</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>
</span><span class='line'>&lt;frameset rows="50%,50%"&gt;
</span><span class='line'>
</span><span class='line'>&lt;frame src="http://swplzj.github.io/example/html/frame_a.html"&gt;
</span><span class='line'>
</span><span class='line'>&lt;frameset cols="25%,75%"&gt;
</span><span class='line'>&lt;frame src="http://swplzj.github.io/example/html/frame_b.html"&gt;
</span><span class='line'>&lt;frame src="http://swplzj.github.io/example/html/frame_c.html"&gt;
</span><span class='line'>&lt;/frameset&gt;
</span><span class='line'>
</span><span class='line'>&lt;/frameset&gt;
</span><span class='line'>
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;frameset rows="25%, *, 50%"&gt;
</span><span class='line'>          &lt;frame src="div.html" noresize="noresize"&gt;
</span><span class='line'>          &lt;frame src="table.html"&gt;
</span><span class='line'>          &lt;frameset cols="25%, 75%"&gt;
</span><span class='line'>              &lt;frame src="div.html"&gt;
</span><span class='line'>              &lt;frame src="table.html"&gt;
</span><span class='line'>          &lt;/frameset&gt;
</span><span class='line'>      &lt;/frameset&gt;</span></code></pre></td></tr></table></div></figure>


<h3>内联框架 iFrame</h3>

<p>iframe 用于在网页内显示网页。</p>

<h5>添加 iframe 的语法</h5>

<pre><code>&lt;iframe src="URL"&gt;&lt;/iframe&gt;
</code></pre>

<p>URL 指向隔离页面的位置。</p>

<pre><code>&lt;iframe src="http://www.baidu.com" width="200" height="200"&gt;&lt;/iframe&gt;
</code></pre>

<h5>使用 iframe 作为链接的目标</h5>

<p>iframe 可用作链接的目标（target）。</p>

<p><code>注意：</code>链接的 target 属性必须引用 iframe 的 name 属性：</p>

<h3>背景</h3>

<h4>bgcolor</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;body bgcolor="#000000"&gt;
</span><span class='line'>&lt;body bgcolor="rgb(0,0,0)"&gt;
</span><span class='line'>&lt;body bgcolor="black"&gt;</span></code></pre></td></tr></table></div></figure>


<h4>背景（Background）</h4>

<p>背景属性将背景设置为图像。属性值为图像的URL。如果图像尺寸小于浏览器窗口，那么图像将在整个浏览器窗口进行复制。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;body background="clouds.gif"&gt;
</span><span class='line'>&lt;body background="http://www.w3school.com.cn/clouds.gif"&gt;</span></code></pre></td></tr></table></div></figure>


<h2>HTML 高级教程</h2>

<hr />

<h3>文档类型</h3>

<p><code>&lt;!DOCTYPE&gt;</code> 声明帮助浏览器正确地显示网页。
Web 世界中存在许多不同的文档。只有了解文档的类型，浏览器才能正确地显示文档。
HTML 也有多个不同的版本，只有完全明白页面中使用的确切 HTML 版本，浏览器才能完全正确地显示出 HTML 页面。
<code>&lt;!DOCTYPE&gt;</code> 不是 HTML 标签。它为浏览器提供一项信息（声明），即 HTML 是用什么版本编写的。</p>

<h3>HTML 头部</h3>

<p><code>&lt;head&gt;</code> 元素是所有头部元素的容器。<code>&lt;head&gt;</code> 内的元素可包含脚本，指示浏览器在何处可以找到样式表，提供元信息，等等。
以下标签都可以添加到 head 部分：<code>&lt;title&gt;</code>、<code>&lt;base&gt;</code>、<code>&lt;link&gt;</code>、<code>&lt;meta&gt;</code>、<code>&lt;script&gt;</code> 以及 <code>&lt;style&gt;</code>。</p>

<h4>文档的标题</h4>

<p><code>&lt;title&gt;</code> 标题定义文档的标题。
title 元素在所有 HTML/XHTML 文档中都是必需的。
title 元素能够：</p>

<ul>
<li>定义浏览器工具栏中的标题</li>
<li>提供页面被添加到收藏夹时显示的标题</li>
<li>显示在搜索引擎结果中的页面标题</li>
</ul>


<h4>所有链接一个目标</h4>

<p><code>&lt;base&gt;</code> 标签为页面上的所有链接规定默认地址或默认目标（target）：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;base href="http://www.w3school.com.cn/images/" /&gt;
</span><span class='line'>&lt;base target="_blank" /&gt;
</span><span class='line'>&lt;/head&gt;</span></code></pre></td></tr></table></div></figure>


<h4>link 元素</h4>

<p><code>&lt;link&gt;</code> 标签定义文档与外部资源之间的关系。
<code>&lt;link&gt;</code> 标签最常用于连接样式表：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;link rel="stylesheet" type="text/css" href="mystyle.css" /&gt;
</span><span class='line'>&lt;/head&gt;</span></code></pre></td></tr></table></div></figure>


<h4>style 元素</h4>

<p><code>&lt;style&gt;</code> 标签用于为 HTML 文档定义样式信息。
您可以在 style 元素内规定 HTML 元素在浏览器中呈现的样式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;style type="text/css"&gt;
</span><span class='line'>body {background-color:yellow}
</span><span class='line'>p {color:blue}
</span><span class='line'>&lt;/style&gt;
</span><span class='line'>&lt;/head&gt;</span></code></pre></td></tr></table></div></figure>


<h4>文档描述</h4>

<p>使用 <code>&lt;meta&gt;</code> 元素来描述文档。
元数据（metadata）是关于数据的信息。
<code>&lt;meta&gt;</code> 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。</p>

<p>典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。</p>

<p><code>&lt;meta&gt;</code> 标签始终位于 head 元素中。</p>

<p>元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</p>

<h5>针对搜索引擎的关键词</h5>

<p>一些搜索引擎会利用 meta 元素的 name 和 content 属性来索引您的页面。
下面的 meta 元素定义页面的描述：</p>

<pre><code>&lt;meta name="description" content="Free Web tutorials on HTML, CSS, XML" /&gt;
</code></pre>

<h4>文档关键词</h4>

<p>使用 <code>&lt;meta&gt;</code> 元素来定义文档的关键词。</p>

<pre><code>&lt;meta name="keywords" content="HTML, CSS, XML" /&gt;
</code></pre>

<p>name 和 content 属性的作用是描述页面的内容。</p>

<h4>重定向用户</h4>

<p>如何把用户重定向到新的网址。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;head&gt;
</span><span class='line'>&lt;meta http-equiv="Content-Type" content="text/html; charset=gb2312" /&gt;
</span><span class='line'>&lt;meta http-equiv="Refresh" content="5;url=http://www.w3school.com.cn" /&gt;
</span><span class='line'>&lt;/head&gt;</span></code></pre></td></tr></table></div></figure>


<h4><code>&lt;script&gt;</code> 元素</h4>

<p><code>&lt;script&gt;</code> 标签用于定义客户端脚本，比如 JavaScript。</p>

<h3>脚本</h3>

<h4>使用 <code>&lt;noscript&gt;</code> 标签</h4>

<p>如何应对不支持脚本或禁用脚本的浏览器。</p>

<pre><code>&lt;body&gt;
&lt;script type="text/javascript"&gt;
document.write("Hello World!")
&lt;/script&gt;
&lt;noscript&gt;Sorry, your browser does not support JavaScript!&lt;/noscript&gt;
&lt;p&gt;不支持 JavaScript 的浏览器将显示 noscript 元素中的文本。&lt;/p&gt;
&lt;/body&gt;
</code></pre>

<p><a name="tips01">锚点</a></p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[2015年个人总结]]></title>
        <link href="http://swplzj.github.io/blog/2015/12/24/2015nian-ge-ren-zong-jie/"/>
        <updated>2015-12-24T16:44:16+08:00</updated>
        <id>http://swplzj.github.io/blog/2015/12/24/2015nian-ge-ren-zong-jie</id>
        <content type="html"><![CDATA[<p>2015年对我来说意义重大，人生中的几件大事都在今年发生了，顺其自然的发生了。。。</p>

<ul>
<li>关于技术&amp;职业</li>
<li>生活</li>
<li>有关爱好和习惯</li>
<li>总结</li>
</ul>


<!--more-->


<h3>关于技术&amp;职业</h3>

<p>年初跳槽来到目前这家公司，也是我做出的职业很重要的抉择，互联网金融行业虽然议论纷纷，数不清有多少家互联网公司跑路了，有包括最近的e租宝公司集团的倒塌。这个行业很浮躁，但是我还是坚信自己的选择，我们老大说过：做任何一件事情，都是有特定的时间窗口，比如目前的互联网金融，现在不做，等格局已定，你也没有可做的了。。。（大概意思^-^）。选择这家公司这个行业，和我目前的个人价值观很是相符。</p>

<p>这一年可以是说技术沉淀和个人自由的一年，我现在就是个小兵，不用关心任何的管理事项(当然管理好自己是很必要的:）)，自己专心做技术，到目前为止，做了四个项目，上线了两个，其实没有太大的挑战，自己私下专研的东西，很自由。每件事情都是有利有弊，对于个人而言，自己的影响力减少了很多，之前自己还带领十几人的团队，进行项目开发，现在作为专职 iOS 开发专心研发任务，和其他人打交道机会很少，当然，这是自己的选择，只不过，自己的进步还是不能令我满意，还需继续努力</p>

<h3>生活</h3>

<p>谈到生活，今年拍摄了婚纱照，美美哒，帅帅的，然后在十一月份完婚，还是双喜临门，有了小宝宝（婚后才知道的）。清楚地记得拍摄婚纱照时内心的喜悦和幸福，还有脸部肌肉的僵硬和劳累；清楚地记得迎娶新娘路上36个小时的惊险和心急等待；清楚地记得在那个特别、简单的婚礼——晚上才把新娘迎娶回家，感谢亲朋好友亲临婚礼的祝福；清楚地记得刚回到北京验出有小宝宝时那种不知该怎么应对的复杂心情；清楚地记得与自己合租了两年多的朋友分别的不舍；清楚地记得参加朋友婚礼时衷心地祝福；清楚地记得得知爸爸耳朵突然听不见了的心疼。。。
一年经历了种种，让我开始懂得生活和工作的权衡，还是罗列一下生活中发生的大事情吧。</p>

<ul>
<li>3月到新公司工作</li>
<li>5月买房</li>
<li>7月和朋友分居（呵呵）</li>
<li>8月拍摄婚纱照</li>
<li>11月完婚</li>
<li>9月有了小 baby（知道的有点晚）</li>
</ul>


<h3>有关爱好和习惯</h3>

<p>到目前为止，还是没有找到自己真正的兴趣爱好，突然感觉没有自己的兴趣，好像损失好多，这些年自己尝试过的东西很多，比如：健身房、跑步、游泳、花样轮滑、练钢笔字、弹吉他、练习钢琴、学习思维导图、学习应用、学习动画、学习一切令人振奋美好的东西，但问题来了，好像很少有坚持下来的东西，实践过之后，才发觉坚持的重要。工作长时间的坐着，自己都开始虚胖起来了，后期找事情给自己做，下午的时候，我坚持爬楼梯，爬楼梯的过程中也思考了很多东西，28层爬上爬下，运动过之后，身体特舒服。</p>

<p>有关习惯的培养，我想说下自己的见解。每天都有很多刺激刺激着我们，我们遇到的刺激我把他分为：新鲜刺激、弱刺激和强刺激。新鲜刺激就是我们生活中遇到让我们感觉很新鲜和美好的事物和事情，比如：第一次看到思维导图；弱刺激是指一些事情或事物对我们有一点点影响，没有那么强烈；比如：早上洗头；强刺激就是对本身产生强烈影响的事物或事情，比如：亲眼目睹他人没有遵守交规而发生重大交通事故；新鲜刺激其实对我们的影响甚微，没有起到成长的作用，最容易让人发生改变的强刺激，但是强刺激不是每天都有的。再说一下习惯，一个坏的习惯不可能被消灭，只能是用一个好的习惯来代替坏的习惯。其实，归根揭底，一个习惯的养成是建立在重复的弱刺激之上的，我也发现了这个规律。</p>

<p>今年影响我最大的习惯是：天天早上洗头。培养这个习惯是为了慢慢增强自己的自信，从一年的坚持来看，的确有效果，现在的自己能够有自己的想法，有自己的坚持，有自己的选择。</p>

<h2>总结</h2>

<p>见贤思齐焉，每当遇到那些比自己优秀的人，我都有感觉豪情万丈，这种情绪也是三天热度，通过一年的学习经历，发现自己身上缺少一种很重要的品质，就是坚持。所以，2016，我会 Focus 我的精力，去做那些真正想做的事情！！！
2016，我来了。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[iOS 设备和 Mac 文件共享传输的几种方式]]></title>
        <link href="http://swplzj.github.io/blog/2015/11/18/ios-she-bei-he-mac-wen-jian-gong-xiang-chuan-shu-de-ji-chong-fang-shi/"/>
        <updated>2015-11-18T11:15:18+08:00</updated>
        <id>http://swplzj.github.io/blog/2015/11/18/ios-she-bei-he-mac-wen-jian-gong-xiang-chuan-shu-de-ji-chong-fang-shi</id>
        <content type="html"><![CDATA[<p>相信大家都有过这样的经历：想实现共享 Mac 和 iPhone 上的文件，下面我粗略的总结了集中方式，和大家一起分享。
通过共享介质的不同可以分为：网络共享、蓝牙无线方式文件传输、数据线连接同步。</p>

<!--more-->


<h2>网络共享</h2>

<p>网络共享又分为局域网共享和互联网共享。</p>

<h3>局域网共享</h3>

<p>我们可以在 Mac 搭建一个临时服务器，通过移动设备访问浏览器，来浏览文件并保存文件，具体操作：</p>

<ol>
<li>Mac 要和 iPad 在同一局域网内；</li>
<li>打开 <code>Terminal</code>，切换到文件所在的目录；</li>
<li>输入 <code>python -m SimpleHTTPServer 8000</code>，利用 python 的 SimpleHTTPServer 模块直接在 Mac 上搭建一个 Web 服务器；</li>
<li>在 iPad 的 Safari 上访问 Mac 的 Web 服务器，点击 pdf 文件就可以打开了；如果 iPad 上装了 iBooks 应用，也可以保存到 iPad 上；</li>
</ol>


<p><code>优点：</code></p>

<p>可以很方便的将 PDF 文件同步到设备上浏览或保存；</p>

<p><code>缺点：</code></p>

<p>支持的文件类型也是非常有限，支持图片、PDF、TXT、Docx等文件类型。</p>

<h3>互联网共享</h3>

<p>这种方式最常见的是我们通过类似 QQ 的方式发送的移动设备上，这类型的应用还有百度云盘、iCloud、Dropbox等。</p>

<p><code>优点：</code></p>

<p>支持的文件格式类型比较多</p>

<p><code>缺点：</code></p>

<p>需要走网络，同步速度慢</p>

<p><code>补充</code></p>

<p>iOS 9.0 之后的备忘录也支持附件存储了，这和 Mac 上的 Note 同步起来简直效率利器，也是我平常最常用的。</p>

<h2>蓝牙无线方式文件传输</h2>

<p>这种方式常见的就是 AirDrop 传输，速度相当不错，非常方便。
值得一提的是 Handoff 功能，这个功能也是用到了蓝牙无线技术，Handoff 是 iOS8 新出的一个功能，当你的 iPhone、iPad、Mac 都打开蓝牙并处于同一个 WiFi 下，它可以在你的 iPhone、iPad 和 Mac 上自由切换未完成的邮件，未制作完的文档，未浏览完的网页，在有人拨打你的iPhone，你正在使用iPad，这时候就不需要放下iPad区接听电话，而可以直接在iPad上接听。</p>

<p><code>值得一说</code></p>

<p>如果你使用 Keynote 来演示，那么你不应该错过使用 iPhone 来作为 Keynote 遥控器，设置方法自己搜索一下，很方便。</p>

<h2>数据线连接同步</h2>

<p>这就需要使用设备管理工具了，我们通常使用的有 iTunes 和 iTools，这里不再赘述功能使用。</p>

<h2>写在最后</h2>

<p>大概就这些方式了，祝大家玩的愉快！</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[iOS - 工作中遇到的问题]]></title>
        <link href="http://swplzj.github.io/blog/2015/11/09/ios-gong-zuo-zhong-yu-dao-de-wen-ti/"/>
        <updated>2015-11-09T16:44:05+08:00</updated>
        <id>http://swplzj.github.io/blog/2015/11/09/ios-gong-zuo-zhong-yu-dao-de-wen-ti</id>
        <content type="html"><![CDATA[<p>在做iOS项目的过程中，到了了一些值得记录下来的问题，以便回顾和帮助他人，跳过他人跌过的坑。</p>

<!--more-->


<h3>1. UITableViewCell 获取当前Cell的方法</h3>

<p>获取cell 的方法一般有两种：</p>

<ul>
<li><p><code>cellForRowAtIndexPath:</code></p>

<p>  利用 tableView 根据indexPath来回调方法，但是这种方法有个值得注意的地方，就是当要获取的cell不可见或者下标超出数组范围的时候，就返回nil；参照文档</p>

<pre><code class="`` ">  - (nullable __kindof UITableViewCell *)cellForRowAtIndexPath:(NSIndexPath *)indexPath;   // returns nil if cell is not visible or index path is out of range
</code></pre></li>
<li><p><code>tableView: cellForRowAtIndexPath:</code></p>

<p>  利用tableView 的代理方法，使用视图控制器来调用，这种调用的时候，也有点需要注意的地方，就是有可能会重绘Cell。</p></li>
</ul>


<h3>2. 获取Cell上textfield数据的方法</h3>

<p>好了，下面有个场景，在一个 tableView 上放置很多自定义 Cell ，cell 上又都有 textfield 输入框，页面最下面有保存按钮，现在问题来了（暂时不关心为什么有这样的需求，为什么使用tableView来显示），当用户在输入框中输入完成之后，滚动到下方，然后，上方cell上textfield的数据被清空了，很显然是Cell被重用了，那解决方法是什么呢。</p>

<p>后来想保存一个Cell数组，每次从这个cell数组中来取值，这时，需要用到上面提到的取Cell 的方法了，这种场景下应该使用哪种方法呢，使用第一种应该没有问题的，但是，有自定义cell需要用户选择值，比如复选按钮，单选按钮，从一个列表中选取项，选择时间等，这就要刷新tableView了，这时，问题又来了，我们需要临时保存用户操作的每一个选项值，最关键的是保存textfield上的值。
使用textfield的代理方法:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)textFieldDidEndEditing:(UITextField *)textField
</span><span class='line'>{
</span><span class='line'>    UCCustomerEditCell *cell = (UCCustomerEditCell *)[[textField superview] superview];
</span><span class='line'>    NSInteger row = [self.tableView indexPathForCell:cell].row;
</span><span class='line'>    // 根据下标来保存textField的输入值
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这种方法还是会有问题，在iOS7 和 iOS8、9上都是不一样的，就是因为cell里面的继承层级关系我们不是确定的，导致我们取到的不是我们想要的cell，更不要说cell的下标了，使用tag值也是不可取的，有种方法可以解决这个问题：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)textFieldDidEndEditing:(UITextField *)textField
</span><span class='line'>{
</span><span class='line'>    UIView *view = textField;
</span><span class='line'>    while (view != nil && ![view isKindOfClass:[UITableViewCell class]]) {
</span><span class='line'>        view = [view superview];
</span><span class='line'>    }   
</span><span class='line'>    UCCustomerEditCell *cell = (UCCustomerEditCell *)view;
</span><span class='line'>    NSInteger row = [self.tableView indexPathForCell:cell].row;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这种方法就是一次遍历父类视图，不清楚cell里面的视图关系，但是一直向上遍历父类view，肯定可以找到cell的。
接下来就是保存每个cell中textfield的值，刷新tableView时给重新赋值，这样就解决了这个问题。</p>

<p>欢迎进入我的博客<a href="http://swplzj.github.io">http://swplzj.github.io</a></p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Git-问题记录]]></title>
        <link href="http://swplzj.github.io/blog/2015/11/09/git-wen-ti-ji-lu/"/>
        <updated>2015-11-09T15:39:22+08:00</updated>
        <id>http://swplzj.github.io/blog/2015/11/09/git-wen-ti-ji-lu</id>
        <content type="html"><![CDATA[<p>在做项目的过程中，遇到很多关于Git相关的问题，记录下来与大家分享，也便于自己回顾。</p>

<h4>介绍一个成功的 Git 分支模型</h4>

<p>当自己从 SVN 转到 Git 后，首先面临的就是创建Git项目，参照网上给出的Git 模型，来创建合理的分支，实际项目也是参照于下面这篇文章，创建了 master 和 develop 本地分支和远程分支，然后每个开发者都有自己的本地分支。</p>

<!--more-->


<p><a href="http://www.oschina.net/translate/a-successful-git-branching-model">参照Git模型</a></p>

<h4>搜索已执行的命令</h4>

<p> terminal 下, <code>control + r</code> 可以搜索已执行的命令，然后按 <code>ESC</code> ，回车</p>

<h4>配置用户名和邮箱</h4>

<p>全局的通过vim ~/.gitconfig来查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config --global user.name "Your Name"
</span><span class='line'>gigit config --global user.email you@example.com</span></code></pre></td></tr></table></div></figure>


<p>局部的通过当前路径下的 .git/config文件来查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git config user.name "Your Name"
</span><span class='line'>git config user.email you@example.com</span></code></pre></td></tr></table></div></figure>


<p>修改最后一次提交的用户名和邮箱地址</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit --amend --author='Your Name &lt;you@example.com&gt;'
</span></code></pre></td></tr></table></div></figure>


<h4>Git使用gitignore建立项目过滤规则</h4>

<p> git中提供两种过滤机制，一种是全局过滤机制，即对所有的git都适用；另一种是针对某个项目使用的过滤规则。</p>

<p><code>问题:</code>
<code>.gitignore</code> 只适用于尚未添加到 <code>git</code> 库的文件。如果已经添加了，则需用 <code>git rm</code> 移除后再重新 <code>commit</code>。</p>

<h4>删除文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rm -r .
</span><span class='line'>rm -rf HIFramework
</span><span class='line'>git rm HIFramework
</span><span class='line'>rm 'HIFramework'
</span><span class='line'>git commit -m 'delete'</span></code></pre></td></tr></table></div></figure>


<h4>远程仓库相关命令</h4>

<pre><code>检出仓库：$ git clone git://github.com/jquery/jquery.git

查看远程仓库：$ git remote -v

添加远程仓库：$ git remote add [name] [url]

删除远程仓库：$ git remote rm [name]

修改远程仓库：$ git remote set-url --push [name] [newUrl]

拉取远程仓库：$ git pull [remoteName] [localBranchName]

推送远程仓库：$ git push [remoteName] [localBranchName]

强制推送更改：$ git push --force origin master
</code></pre>

<p>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin test:master         // 提交本地test分支作为远程的master分支
</span><span class='line'>$ git push origin test:test              // 提交本地test分支作为远程的test分支</span></code></pre></td></tr></table></div></figure>


<h4>分支(branch)操作相关命令</h4>

<pre><code>查看本地分支：$ git branch -av
查看远程分支：$ git branch -r （如果还是看不到就先 git fetch origin 先）
创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支
切换分支：$ git checkout [name]
创建新分支并立即切换到新分支：$ git checkout -b [name]
直接检出远程分支：$ git checkout -b [name] [remoteName] (如：git checkout -b myNewBranch origin/dragon)
删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项
合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并
合并最后的2个提交：$ git rebase -i HEAD~2 ---- 数字2按需修改即可（如果需提交到远端$ git push -f origin master 慎用！）
创建远程分支(本地分支push到远程)：$ git push origin [name]
删除远程分支：$ git push origin :heads/[name] 或 $ git push origin :[name] 
修改分支名称：git branch -m &lt;old_branch_name&gt; &lt;new_branch_name&gt;  
</code></pre>

<p>创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git symbolic-ref HEAD refs/heads/[name]
</span><span class='line'>$ rm .git/index
</span><span class='line'>$ git clean -fdx</span></code></pre></td></tr></table></div></figure>


<h4>版本(tag)操作相关命令</h4>

<pre><code>查看版本：$ git tag

创建版本：$ git tag [name]

删除版本：$ git tag -d [name]

查看远程版本：$ git tag -r

创建远程版本(本地版本push到远程)：$ git push origin [name]

删除远程版本：$ git push origin :refs/tags/[name]

合并远程仓库的tag到本地：$ git pull origin --tags

上传本地tag到远程仓库：$ git push origin --tags

创建带注释的tag：$ git tag -a [name] -m 'yourMessage'
</code></pre>

<h4>删除和回退</h4>

<pre><code>删除当前仓库内未受版本管理的文件：$ git clean -f

恢复仓库到上一次的提交状态：$ git reset --hard

回退所有内容到上一个版本：$ git reset HEAD^

回退a.py这个文件的版本到上一个版本：$ git reset HEAD^ a.py

回退到某个版本：$ git reset 057d 

将本地的状态回退到和远程的一样：$ git reset –hard origin/master  

向前回退到第3个版本：$ git reset –-soft HEAD~3

修改最后的提交日志：$ git commit --amend

也可以修改提交的用户名和Email：

git commit --amend --author='Your Name &lt;you@example.com&gt;'
</code></pre>

<h4>查看提交日志</h4>

<p>使用 $ git log &ndash;oneline &ndash;graph &ndash;name-status 既可以看到简介的日志信息，也可以看到改了哪些文件，一举两得：</p>

<p>暂时就是这么多了，持续更新中，待续。。。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Git 在项目中的基本使用]]></title>
        <link href="http://swplzj.github.io/blog/2015/11/09/git-zai-xiang-mu-zhong-de-ji-ben-shi-yong/"/>
        <updated>2015-11-09T11:36:49+08:00</updated>
        <id>http://swplzj.github.io/blog/2015/11/09/git-zai-xiang-mu-zhong-de-ji-ben-shi-yong</id>
        <content type="html"><![CDATA[<h3>Git 基础</h3>

<hr />

<h4>直接记录快照，而非差异比较</h4>

<p>Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。 概念上来区分，其它大部分系统以文件变更列表的方式存储信息。 这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。</p>

<!--more-->


<p><code>存储每个文件与初始版本的差异</code></p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_11_06_svn_work_flow.png"></p>

<p>Git 不按照以上方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。</p>

<p><code>存储项目随时间改变的快照</code></p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_11_06_git_screenshot.png"></p>

<h4>近乎所有操作都是本地执行</h4>

<p>在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。
要浏览项目的历史，Git 不需外连到服务器去获取历史，然后再显示出来——它只需直接从本地数据库中读取。 你能立即看到项目历史。 如果你想查看当前版本与一个月前的版本之间引入的修改，Git 会查找到一个月前的文件做一次本地的差异计算，而不是由远程服务器处理或从远程服务器拉回旧版本文件再来本地处理。</p>

<h4>Git 保证完整性</h4>

<p>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。 这个功能建构在 Git 底层，是构成 Git 哲学不可或缺的部分。 若你在传送过程中丢失信息或损坏文件，Git 就能发现。</p>

<p>Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：</p>

<pre><code>24b9da6552252987aa493b52f8696cd6d3b00373
</code></pre>

<p>Git 中使用这种哈希值的情况很多，你将经常看到这种哈希值。 实际上，Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。</p>

<h4>Git 一般只添加数据</h4>

<p>你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。</p>

<h4>三种状态</h4>

<p>Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。 已提交表示数据已经安全的保存在本地数据库中。 已修改表示修改了文件，但还没保存到数据库中。 已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</p>

<p>由此引入 Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。</p>

<p><code>工作目录、暂存区域以及 Git 仓库</code></p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_11_06_git_areas.png"></p>

<p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p>

<p>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p>

<p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。</p>

<p>基本的 Git 工作流程如下：</p>

<ol>
<li><p>在工作目录中修改文件。</p></li>
<li><p>暂存文件，将文件的快照放入暂存区域。</p></li>
<li><p>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</p></li>
</ol>


<h3>获取 Git 仓库</h3>

<hr />

<pre><code>$ git init
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add *.c
</span><span class='line'>$ git add LICENSE
</span><span class='line'>$ git commit -m 'initial project version'</span></code></pre></td></tr></table></div></figure>


<h5>克隆现有的仓库</h5>

<pre><code>$ git clone https://github.com/libgit2/libgit2


$ git clone https://github.com/libgit2/libgit2 mylibgit
</code></pre>

<p>这将执行与上一个命令相同的操作，不过在本地创建的仓库名字变为 mylibgit。</p>

<h3>记录每次更新到仓库</h3>

<p>使用 Git 时文件的生命周期如下：</p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_11_06_git_file_life_cycle.png"></p>

<h5>检查当前文件状态</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>nothing to commit, working directory clean</span></code></pre></td></tr></table></div></figure>


<h5>跟踪新文件</h5>

<pre><code>$ git add README
</code></pre>

<h5>暂存已修改文件</h5>

<p> 要暂存这次更新，需要运行 git add 命令。 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为“添加内容到下一次提交中”而不是“将一个文件添加到项目中”要更加合适。</p>

<h5>状态简览</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status -s
</span><span class='line'> M README
</span><span class='line'>MM Rakefile
</span><span class='line'>A  lib/git.rb
</span><span class='line'>M  lib/simplegit.rb
</span><span class='line'>?? LICENSE.txt</span></code></pre></td></tr></table></div></figure>


<p>新添加的未跟踪文件前面有 <code>??</code> 标记，新添加到暂存区中的文件前面有 <code>A</code> 标记，修改过的文件前面有 <code>M</code> 标记。 你可能注意到了 <code>M</code> 有两个可以出现的位置，出现在右边的 <code>M</code> 表示该文件被修改了但是还没放入暂存区，出现在靠左边的 <code>M</code> 表示该文件被修改了并放入了暂存区。</p>

<h5>忽略文件</h5>

<p>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat .gitignore
</span><span class='line'>*.[oa]
</span><span class='line'>*~</span></code></pre></td></tr></table></div></figure>


<p>第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。</p>

<p>文件 .gitignore 的格式规范如下：</p>

<pre><code>所有空行或者以 ＃ 开头的行都会被 Git 忽略。

可以使用标准的 glob 模式匹配。

匹配模式可以以（/）开头防止递归。

匹配模式可以以（/）结尾指定目录。

要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。
</code></pre>

<p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>星号（*）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号（*) 表示匹配任意中间目录，比如a/**/z 可以匹配 a/z, a/b/z 或 a/b/c/z等。</span></code></pre></td></tr></table></div></figure>


<p><code>Tip</code></p>

<p><code>GitHub</code> 有一个十分详细的针对数十种项目及语言的 <code>.gitignore</code> 文件列表，你可以在 <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a> 找到它.</p>

<h5>查看已暂存和未暂存的修改</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff
</span><span class='line'>diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
</span><span class='line'>index 8ebb991..643e24f 100644
</span><span class='line'>--- a/CONTRIBUTING.md
</span><span class='line'>+++ b/CONTRIBUTING.md
</span><span class='line'>@@ -65,7 +65,8 @@ branch directly, things can get messy.
</span><span class='line'> Please include a nice description of your changes when you submit your PR;
</span><span class='line'> if we have to read the whole diff to figure out why you're contributing
</span><span class='line'> in the first place, you're less likely to get feedback and have your change
</span><span class='line'>-merged in.
</span><span class='line'>+merged in. Also, split your changes into comprehensive chunks if you patch is
</span><span class='line'>+longer than a dozen lines.
</span><span class='line'>
</span><span class='line'> If you are starting to work on a particular area, feel free to submit a PR
</span><span class='line'> that highlights your work in progress (and note in the PR title that it's</span></code></pre></td></tr></table></div></figure>


<p>git diff 将通过文件补丁的格式显示具体哪些行发生了改变。
此命令比较的是工作目录中当前文件和暂存区域快照之间的差异， 也就是修改之后还没有暂存起来的变化内容。</p>

<p>若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff &ndash;cached 命令。（Git 1.6.1 及更高版本还允许使用 git diff &ndash;staged，效果是相同的，但更好记些。）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git diff --staged
</span><span class='line'>diff --git a/README b/README
</span><span class='line'>new file mode 100644
</span><span class='line'>index 0000000..03902a1
</span><span class='line'>--- /dev/null
</span><span class='line'>+++ b/README
</span><span class='line'>@@ -0,0 +1 @@
</span><span class='line'>+My Project</span></code></pre></td></tr></table></div></figure>


<h5>提交更新</h5>

<p>默认的提交消息包含最后一次运行 git status 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。 退出编辑器时，Git 会丢掉注释行，用你输入提交附带信息生成一次提交。另外，你也可以在 commit 命令后添加 -m 选项，将提交信息与命令放在同一行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m "Story 182: Fix benchmarks for speed"
</span><span class='line'>[master 463dc4f] Story 182: Fix benchmarks for speed
</span><span class='line'> 2 files changed, 2 insertions(+)
</span><span class='line'> create mode 100644 README</span></code></pre></td></tr></table></div></figure>


<h5>跳过使用暂存区域</h5>

<p>Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>Changes not staged for commit:
</span><span class='line'>  (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'>  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>
</span><span class='line'>    modified:   CONTRIBUTING.md
</span><span class='line'>
</span><span class='line'>no changes added to commit (use "git add" and/or "git commit -a")
</span><span class='line'>$ git commit -a -m 'added new benchmarks'
</span><span class='line'>[master 83e38c7] added new benchmarks
</span><span class='line'> 1 file changed, 5 insertions(+), 0 deletions(-)</span></code></pre></td></tr></table></div></figure>


<h5>移除文件</h5>

<p>要从 <code>Git</code> 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用 <code>git rm</code> 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p>

<p>如果只是简单地从工作目录中手工删除文件，运行 <code>git status</code> 时就会在 “Changes not staged for commit” 部分（也就是 未暂存清单）看到：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rm PROJECTS.md
</span><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>Your branch is up-to-date with 'origin/master'.
</span><span class='line'>Changes not staged for commit:
</span><span class='line'>  (use "git add/rm &lt;file&gt;..." to update what will be committed)
</span><span class='line'>  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>
</span><span class='line'>        deleted:    PROJECTS.md
</span><span class='line'>
</span><span class='line'>no changes added to commit (use "git add" and/or "git commit -a")</span></code></pre></td></tr></table></div></figure>


<p>然后再运行 git rm 记录此次移除文件的操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rm PROJECTS.md
</span><span class='line'>rm 'PROJECTS.md'
</span><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>Changes to be committed:
</span><span class='line'>  (use "git reset HEAD &lt;file&gt;..." to unstage)
</span><span class='line'>
</span><span class='line'>    deleted:    PROJECTS.md</span></code></pre></td></tr></table></div></figure>


<p>下一次提交时，该文件就不再纳入版本管理了。 如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）。 这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。</p>

<p>另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 .gitignore 文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 &ndash;cached 选项：</p>

<pre><code>$ git rm --cached README
</code></pre>

<p><code>git rm</code> 命令后面可以列出文件或者目录的名字，也可以使用 <code>glob</code> 模式。 比方说：</p>

<pre><code>$ git rm log/\*.log
</code></pre>

<p>注意到<code>星号 *</code> 之前的<code>反斜杠 \</code>， 因为 <code>Git</code> 有它自己的文件模式扩展匹配方式，所以我们不用 <code>shell</code> 来帮忙展开。 此命令删除 <code>log/</code> 目录下扩展名为 <code>.log</code> 的所有文件。 类似的比如：</p>

<pre><code>$ git rm \*~
</code></pre>

<p>该命令为删除以 <code>~ 结尾</code>的所有文件。</p>

<h4>移动文件</h4>

<pre><code>$ git mv file_from file_to
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> git mv README.md README
</span><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>Changes to be committed:
</span><span class='line'>  (use "git reset HEAD &lt;file&gt;..." to unstage)
</span><span class='line'>
</span><span class='line'>    renamed:    README.md -&gt; README</span></code></pre></td></tr></table></div></figure>


<p>其实，运行 git mv 就相当于运行了下面三条命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mv README.md README
</span><span class='line'>$ git rm README.md
</span><span class='line'>$ git add README</span></code></pre></td></tr></table></div></figure>


<h3>查看提交历史</h3>

<hr />

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log
</span><span class='line'>commit ca82a6dff817ec66f44342007202690a93763949
</span><span class='line'>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
</span><span class='line'>Date:   Mon Mar 17 21:52:11 2008 -0700
</span><span class='line'>
</span><span class='line'>    changed the version number
</span><span class='line'>
</span><span class='line'>commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
</span><span class='line'>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
</span><span class='line'>Date:   Sat Mar 15 16:40:33 2008 -0700
</span><span class='line'>
</span><span class='line'>    removed unnecessary test
</span><span class='line'>
</span><span class='line'>commit a11bef06a3f659402fe7563abf99ad00de2209e6
</span><span class='line'>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
</span><span class='line'>Date:   Sat Mar 15 10:31:28 2008 -0700
</span><span class='line'>
</span><span class='line'>    first commit</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
默认不用任何参数的话，<code>git log</code> 会按提交时间列出所有的更新，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 <code>SHA-1</code> 校验和作者的名字和电子邮件地址、提交时间以及提交说明。</p>

<p>一个常用的选项是 <code>-p</code>，用来显示每次提交的内容差异。 你也可以加上 <code>-2</code> 来仅显示最近两次提交。
如果你想看到每次提交的简略的统计信息，你可以使用 <code>--stat</code> 选项，此选项在每次提交的下面列出额所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p>

<p>另外一个常用的选项是 <code>--pretty</code>。 这个选项可以指定使用不同于默认格式的方式展示提交历史。  这个选项有一些内建的子选项供你使用。 比如用 <code>oneline</code> 将每个提交放在一行显示，查看的提交数很大时非常有用。 另外还有 <code>short</code>，<code>full</code> 和 <code>fuller</code> 可以用，展示的信息或多或少有些不同。</p>

<p>最有意思的是 <code>format</code>，可以定制要显示的记录格式。 这样的输出对后期提取分析格外有用 — 因为你知道输出的格式不会随着 <code>Git</code> 的更新而发生改变：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --pretty=format:"%h - %an, %ar : %s"
</span><span class='line'>ca82a6d - Scott Chacon, 6 years ago : changed the version number
</span><span class='line'>085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
</span><span class='line'>a11bef0 - Scott Chacon, 6 years ago : first commit</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>git log --pretty=format</code> 常用的选项</li>
</ul>


<table>
<thead>
<tr>
<th>选项  </th>
<th>  说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>%H      </td>
<td> 提交对象（commit）的完整哈希字串</td>
</tr>
<tr>
<td>%h      </td>
<td> 提交对象的简短哈希字串</td>
</tr>
<tr>
<td>%T      </td>
<td> 树对象（tree）的完整哈希字串</td>
</tr>
<tr>
<td>%t      </td>
<td> 树对象的简短哈希字串</td>
</tr>
<tr>
<td>%P      </td>
<td> 父对象（parent）的完整哈希字串</td>
</tr>
<tr>
<td>%p      </td>
<td> 父对象的简短哈希字串</td>
</tr>
<tr>
<td>%an     </td>
<td> 作者（author）的名字</td>
</tr>
<tr>
<td>%ae     </td>
<td> 作者的电子邮件地址</td>
</tr>
<tr>
<td>%ad     </td>
<td> 作者修订日期（可以用 &ndash;date= 选项定制格式）</td>
</tr>
<tr>
<td>%ar     </td>
<td> 作者修订日期，按多久以前的方式显示</td>
</tr>
<tr>
<td>%cn     </td>
<td> 提交者(committer)的名字</td>
</tr>
<tr>
<td>%ce     </td>
<td> 提交者的电子邮件地址</td>
</tr>
<tr>
<td>%cd     </td>
<td> 提交日期</td>
</tr>
<tr>
<td>%cr     </td>
<td> 提交日期，按多久以前的方式显示</td>
</tr>
<tr>
<td>%s      </td>
<td> 提交说明</td>
</tr>
</tbody>
</table>


<p>作者 和 提交者 之间究竟有何差别， 其实作者指的是实际作出修改的人，提交者指的是最后将此工作成果提交到仓库的人。</p>

<p>当 <code>oneline</code> 或 <code>format</code> 与另一个 <code>log</code> 选项 <code>--graph</code> 结合使用时尤其有用。 这个选项添加了一些<code>ASCII</code>字符串来形象地展示你的分支、合并历史：</p>

<h4>限制输出长度</h4>

<p><code>git log</code> 还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。
另外还有按照时间作限制的选项，比如 <code>--since</code> 和 <code>--until</code> 也很有用。 例如，下面的命令列出所有最近两周内的提交：</p>

<pre><code>$ git log --since=2.weeks
</code></pre>

<p>另一个非常有用的筛选选项是 <code>-S</code>，可以列出那些添加或移除了某些字符串的提交。 比如说，你想找出添加或移除了某一个特定函数的引用的提交，你可以这样使用：</p>

<pre><code>$ git log -Sfunction_name   
</code></pre>

<p><code>限制 git log 输出的选项</code></p>

<table>
<thead>
<tr>
<th>选项  </th>
<th>   说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-(n)    </td>
<td> 仅显示最近的 n 条提交</td>
</tr>
<tr>
<td>&ndash;since, &ndash;after    </td>
<td> 仅显示指定时间之后的提交。</td>
</tr>
<tr>
<td>&ndash;until, &ndash;before   </td>
<td>   仅显示指定时间之前的提交。</td>
</tr>
<tr>
<td>&ndash;author    </td>
<td> 仅显示指定作者相关的提交。</td>
</tr>
<tr>
<td>&ndash;committer </td>
<td> 仅显示指定提交者相关的提交。</td>
</tr>
<tr>
<td>&ndash;grep  </td>
<td> 仅显示含指定关键字的提交</td>
</tr>
<tr>
<td>-S  </td>
<td> 仅显示添加或移除了某个关键字的提交</td>
</tr>
</tbody>
</table>


<p>来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试文件，可以用下面的查询命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
</span><span class='line'>   --before="2008-11-01" --no-merges -- t/
</span><span class='line'>5610e3b - Fix testcase failure when extended attributes are in use
</span><span class='line'>acd3b9e - Enhance hold_lock_file_for_{update,append}() API
</span><span class='line'>f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
</span><span class='line'>d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
</span><span class='line'>51a94af - Fix "checkout --track -b newbranch" on detached HEAD
</span><span class='line'>b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch</span></code></pre></td></tr></table></div></figure>


<h3>撤消操作</h3>

<hr />

<pre><code>$ git commit --amend
</code></pre>

<p>这个命令会将暂存区中的文件提交。 如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），那么快照会保持不变，而你所修改的只是提交信息。</p>

<p>例如，你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m 'initial commit'
</span><span class='line'>$ git add forgotten_file
</span><span class='line'>$ git commit --amend</span></code></pre></td></tr></table></div></figure>


<p> <br/>
最终你只会有一个提交 - 第二次提交将代替第一次提交的结果。</p>

<h5>取消暂存的文件</h5>

<p>使用 <code>git reset HEAD &lt;file&gt;...</code>来取消暂存。 所以，我们可以这样来取消暂存 <code>CONTRIBUTING.md</code> 文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git reset HEAD CONTRIBUTING.md
</span><span class='line'>Unstaged changes after reset:
</span><span class='line'>M CONTRIBUTING.md
</span><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>Changes to be committed:
</span><span class='line'>  (use "git reset HEAD &lt;file&gt;..." to unstage)
</span><span class='line'>
</span><span class='line'>    renamed:    README.md -&gt; README
</span><span class='line'>
</span><span class='line'>Changes not staged for commit:
</span><span class='line'>  (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'>  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>
</span><span class='line'>    modified:   CONTRIBUTING.md
</span></code></pre></td></tr></table></div></figure>


<p><code>提示</code></p>

<p>虽然在调用时加上 <code>--hard</code> 选项可以令 <code>git reset</code> 成为一个危险的命令（译注：可能导致工作目录中所有当前进度丢失！），但本例中工作目录内的文件并不会被修改。 不加选项地调用 <code>git reset</code> 并不危险 — 它只会修改暂存区域。</p>

<h5>撤消对文件的修改</h5>

<p>撤消之前所做的修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -- CONTRIBUTING.md
</span><span class='line'>$ git status
</span><span class='line'>On branch master
</span><span class='line'>Changes to be committed:
</span><span class='line'>  (use "git reset HEAD &lt;file&gt;..." to unstage)
</span><span class='line'>
</span><span class='line'>    renamed:    README.md -&gt; README</span></code></pre></td></tr></table></div></figure>


<p><code>危险</code></p>

<p>你需要知道 <code>git checkout -- [file]</code> 是一个危险的命令，这很重要。 你对那个文件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。</p>

<p><code>记住</code></p>

<p>在 <code>Git</code> 中任何 已提交的 东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用 <code>--amend</code> 选项覆盖的提交也可以恢复。 然而，任何你未提交的东西丢失后很可能再也找不到了</p>

<h3>远程仓库的使用</h3>

<hr />

<h5>查看远程仓库</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/schacon/ticgit
</span><span class='line'>Cloning into 'ticgit'...
</span><span class='line'>remote: Reusing existing pack: 1857, done.
</span><span class='line'>remote: Total 1857 (delta 0), reused 0 (delta 0)
</span><span class='line'>Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
</span><span class='line'>Resolving deltas: 100% (772/772), done.
</span><span class='line'>Checking connectivity... done.
</span><span class='line'>$ cd ticgit
</span><span class='line'>$ git remote
</span><span class='line'>origin</span></code></pre></td></tr></table></div></figure>


<p>你也可以指定选项 <code>-v</code>，会显示需要读写远程仓库使用的 <code>Git</code> 保存的简写与其对应的 <code>URL</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote -v
</span><span class='line'>origin    https://github.com/schacon/ticgit (fetch)
</span><span class='line'>origin    https://github.com/schacon/ticgit (push)</span></code></pre></td></tr></table></div></figure>


<h5>添加远程仓库</h5>

<p>运行 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 添加一个新的远程 <code>Git</code> 仓库，同时指定一个你可以轻松引用的简写</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote
</span><span class='line'>origin
</span><span class='line'>$ git remote add pb https://github.com/paulboone/ticgit
</span><span class='line'>$ git remote -v
</span><span class='line'>origin    https://github.com/schacon/ticgit (fetch)
</span><span class='line'>origin    https://github.com/schacon/ticgit (push)
</span><span class='line'>pb    https://github.com/paulboone/ticgit (fetch)
</span><span class='line'>pb    https://github.com/paulboone/ticgit (push)</span></code></pre></td></tr></table></div></figure>


<p>现在你可以在命令行中使用字符串 pb 来代替整个 URL。 例如，如果你想拉取 Paul 的仓库中有但你没有的信息，可以运行 <code>git fetch pb</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git fetch pb
</span><span class='line'>remote: Counting objects: 43, done.
</span><span class='line'>remote: Compressing objects: 100% (36/36), done.
</span><span class='line'>remote: Total 43 (delta 10), reused 31 (delta 5)
</span><span class='line'>Unpacking objects: 100% (43/43), done.
</span><span class='line'>From https://github.com/paulboone/ticgit
</span><span class='line'> * [new branch]      master     -&gt; pb/master
</span><span class='line'> * [new branch]      ticgit     -&gt; pb/ticgit</span></code></pre></td></tr></table></div></figure>


<h5>从远程仓库中抓取与拉取</h5>

<pre><code>$ git fetch [remote-name]
</code></pre>

<p>这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p>

<p>如果你使用 <code>clone</code> 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 <code>origin</code> 为简写。 所以，<code>git fetch origin</code> 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 <code>git fetch</code> 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p>

<p>如果你有一个分支设置为跟踪一个远程分支，可以使用 <code>git pull</code> 命令来自动的抓取然后合并远程分支到当前分支。 这对你来说可能是一个更简单或更舒服的工作流程；默认情况下，<code>git clone</code> 命令会自动设置本地 <code>master</code> 分支跟踪克隆的远程仓库的 <code>master</code> 分支（或不管是什么名字的默认分支）。 运行 <code>git pull</code> 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。</p>

<h5>推送到远程仓库</h5>

<p><code>git push [remote-name] [branch-name]</code> 当你想要将 <code>master</code> 分支推送到 <code>origin</code> 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字），那么运行这个命令就可以将你所做的备份到服务器：</p>

<pre><code>$ git push origin master
</code></pre>

<h5>查看远程仓库</h5>

<p>使用 <code>git remote show [remote-name]</code> 命令，查看某一个远程仓库的更多信息。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote show origin
</span><span class='line'>* remote origin
</span><span class='line'>  Fetch URL: https://github.com/schacon/ticgit
</span><span class='line'>  Push  URL: https://github.com/schacon/ticgit
</span><span class='line'>  HEAD branch: master
</span><span class='line'>  Remote branches:
</span><span class='line'>    master                               tracked
</span><span class='line'>    dev-branch                           tracked
</span><span class='line'>  Local branch configured for 'git pull':
</span><span class='line'>    master merges with remote master
</span><span class='line'>  Local ref configured for 'git push':
</span><span class='line'>    master pushes to master (up to date)</span></code></pre></td></tr></table></div></figure>


<h5>远程仓库的移除与重命名</h5>

<p>如果想要重命名引用的名字可以运行 <code>git remote rename</code> 去修改一个远程仓库的简写名。 例如，想要将 <code>pb</code> 重命名为 <code>paul</code>，可以用 <code>git remote rename</code> 这样做：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote rename pb paul
</span><span class='line'>$ git remote
</span><span class='line'>origin
</span><span class='line'>paul</span></code></pre></td></tr></table></div></figure>


<p>如果因为一些原因想要移除一个远程仓库 - 你已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了 - 可以使用 <code>git remote rm</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote rm paul
</span><span class='line'>$ git remote
</span><span class='line'>origin</span></code></pre></td></tr></table></div></figure>


<h3>打标签</h3>

<hr />

<p>像其他版本控制系统（VCS）一样，Git 可以给历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（v1.0 等等）。</p>

<h5>列出标签</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag
</span><span class='line'>v0.1
</span><span class='line'>v1.3</span></code></pre></td></tr></table></div></figure>


<p>这个命令以字母顺序列出标签；但是它们出现的顺序并不重要。</p>

<h5>创建标签</h5>

<p>Git 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）。</p>

<p>一个轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。然而，附注标签是存储在 Git 数据库中的一个完整对象。它们是可以被校验的；其中包含打标签者的名字、电子邮件地址、日期时间；还有一个标签信息；并且可以使用 GNU Privacy Guard （GPG）签名与验证。 通常建议创建附注标签，这样你可以拥有以上所有信息；但是如果你只是想用一个临时的标签，或者因为某些原因不想要保存那些信息，轻量标签也是可用的。</p>

<h5>附注标签</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag -a v1.4 -m 'my version 1.4'
</span><span class='line'>$ git tag
</span><span class='line'>v0.1
</span><span class='line'>v1.3
</span><span class='line'>v1.4
</span></code></pre></td></tr></table></div></figure>


<p>通过使用 git show 命令可以看到标签信息与对应的提交信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git show v1.4
</span><span class='line'>tag v1.4
</span><span class='line'>Tagger: Ben Straub &lt;ben@straub.cc&gt;
</span><span class='line'>Date:   Sat May 3 20:19:12 2014 -0700
</span><span class='line'>
</span><span class='line'>my version 1.4
</span><span class='line'>
</span><span class='line'>commit ca82a6dff817ec66f44342007202690a93763949
</span><span class='line'>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
</span><span class='line'>Date:   Mon Mar 17 21:52:11 2008 -0700
</span><span class='line'>
</span><span class='line'>  changed the version number</span></code></pre></td></tr></table></div></figure>


<h4>轻量标签</h4>

<p>轻量标签本质上是将提交校验和存储到一个文件中 - 没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag v1.4-lw
</span><span class='line'>$ git tag
</span><span class='line'>v0.1
</span><span class='line'>v1.3
</span><span class='line'>v1.4
</span><span class='line'>v1.4-lw
</span><span class='line'>v1.5</span></code></pre></td></tr></table></div></figure>


<p>这时，如果在标签上运行 git show，你不会看到额外的标签信息。 命令只会显示出提交信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git show v1.4-lw
</span><span class='line'>commit ca82a6dff817ec66f44342007202690a93763949
</span><span class='line'>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
</span><span class='line'>Date:   Mon Mar 17 21:52:11 2008 -0700
</span><span class='line'>
</span><span class='line'>    changed the version number</span></code></pre></td></tr></table></div></figure>


<h4>后期打标签</h4>

<p>你也可以对过去的提交打标签。 假设提交历史是这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git log --pretty=oneline
</span><span class='line'>15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
</span><span class='line'>a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
</span><span class='line'>0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
</span><span class='line'>6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
</span><span class='line'>0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
</span><span class='line'>4682c3261057305bdd616e23b64b0857d832627b added a todo file
</span><span class='line'>166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
</span><span class='line'>9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
</span><span class='line'>964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
</span><span class='line'>8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme</span></code></pre></td></tr></table></div></figure>


<p>现在，假设在 <code>v1.2</code> 时你忘记给项目打标签，也就是在 <code>updated rakefile</code> 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）:</p>

<pre><code>$ git tag -a v1.2 9fceb02
</code></pre>

<p>可以看到你已经在那次提交上打上标签了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git tag
</span><span class='line'>v0.1
</span><span class='line'>v1.2
</span><span class='line'>v1.3
</span><span class='line'>v1.4
</span><span class='line'>v1.4-lw
</span><span class='line'>v1.5
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>$ git show v1.2
</span><span class='line'>tag v1.2
</span><span class='line'>Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;
</span><span class='line'>Date:   Mon Feb 9 15:32:16 2009 -0800
</span><span class='line'>
</span><span class='line'>version 1.2
</span><span class='line'>commit 9fceb02d0ae598e95dc970b74767f19372d61af8
</span><span class='line'>Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;
</span><span class='line'>Date:   Sun Apr 27 20:43:35 2008 -0700
</span><span class='line'>
</span><span class='line'>    updated rakefile
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<h4>共享标签</h4>

<p>默认情况下，<code>git push</code> 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样 - 你可以运行 <code>git push origin [tagname]</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin v1.5
</span><span class='line'>Counting objects: 14, done.
</span><span class='line'>Delta compression using up to 8 threads.
</span><span class='line'>Compressing objects: 100% (12/12), done.
</span><span class='line'>Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
</span><span class='line'>Total 14 (delta 3), reused 0 (delta 0)
</span><span class='line'>To git@github.com:schacon/simplegit.git
</span><span class='line'> * [new tag]         v1.5 -&gt; v1.5</span></code></pre></td></tr></table></div></figure>


<p>如果想要一次性推送很多标签，也可以使用带有 &ndash;tags 选项的 git push 命令。 这将会把所有不在远程仓库服务器上的标签全部传送到那里。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin --tags
</span><span class='line'>Counting objects: 1, done.
</span><span class='line'>Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
</span><span class='line'>Total 1 (delta 0), reused 0 (delta 0)
</span><span class='line'>To git@github.com:schacon/simplegit.git
</span><span class='line'> * [new tag]         v1.4 -&gt; v1.4
</span><span class='line'> * [new tag]         v1.4-lw -&gt; v1.4-lw</span></code></pre></td></tr></table></div></figure>


<h4>检出标签</h4>

<p>在 Git 中你并不能真的检出一个标签，因为它们并不能像分支一样来回移动。 如果你想要工作目录与仓库中特定的标签版本完全一样，可以使用 git checkout -b [branchname] [tagname] 在特定的标签上创建一个新分支：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -b version2 v2.0.0
</span><span class='line'>Switched to a new branch 'version2'</span></code></pre></td></tr></table></div></figure>


<p>当然，如果在这之后又进行了一次提交，version2 分支会因为改动向前移动了，那么 version2 分支就会和 v2.0.0 标签稍微有些不同，这时就应该当心了。</p>

<h3>Git 别名</h3>

<hr />

<p>Git 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global alias.co checkout
</span><span class='line'>$ git config --global alias.br branch
</span><span class='line'>$ git config --global alias.ci commit
</span><span class='line'>$ git config --global alias.st status</span></code></pre></td></tr></table></div></figure>


<p>这意味着，当要输入 git commit时，只需要输入 git ci。 随着你继续不断地使用 Git，可能也会经常使用其他命令，所以创建别名时不要犹豫。</p>

<p>在创建你认为应该存在的命令时这个技术会很有用。 例如，为了解决取消暂存文件的易用性问题，可以向 Git 中添加你自己的取消暂存别名：</p>

<pre><code>$ git config --global alias.unstage 'reset HEAD --'
</code></pre>

<p>这会使下面的两个命令等价：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git unstage fileA
</span><span class='line'>$ git reset HEAD -- fileA</span></code></pre></td></tr></table></div></figure>


<p>这样看起来更清楚一些。 通常也会添加一个 last 命令，像这样：</p>

<pre><code>$ git config --global alias.last 'log -1 HEAD'
</code></pre>

<p>这样，可以轻松地看到最后一次提交：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git last
</span><span class='line'>commit 66938dae3329c7aebe598c2246a8e6af90d04646
</span><span class='line'>Author: Josh Goebel &lt;dreamer3@example.com&gt;
</span><span class='line'>Date:   Tue Aug 26 19:48:51 2008 +0800
</span><span class='line'>
</span><span class='line'>    test for current head
</span><span class='line'>
</span><span class='line'>    Signed-off-by: Scott Chacon &lt;schacon@example.com&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[最近情况]]></title>
        <link href="http://swplzj.github.io/blog/2015/11/05/zui-jin-qing-kuang/"/>
        <updated>2015-11-05T18:44:27+08:00</updated>
        <id>http://swplzj.github.io/blog/2015/11/05/zui-jin-qing-kuang</id>
        <content type="html"><![CDATA[<p>最近的情况是：忙 - 盲 - 茫，一言难尽啊，这些经历都是有必要记录下来，以便回顾自己走过的路，方便总结自己的成长得失。</p>

<!--more-->


<p>今年3月份辞职，有了一次重新选择公司的机会，这次较以前还是比较慎重的，总后拿到了几个 Offer，权衡之后来到了选择这家公司，当时几个公司的情形是这样的：</p>

<ul>
<li>墨迹天气面试通过了，但是，进入之后感觉公司没有一个很好的公司氛围（其实是和798旁边的视界核心比较的了），没有然后了；</li>
<li>视界核心，这是一个令我很向往的公司，一个极客的天堂，各方面都很满意，也过了初试、复试，但到最后的时候，公司还是没有要我，真残忍啊。印象：团队小而精悍，产品都具有互联网思维，融入了极客精神，产品设计和用到的技术都是一流的，很赞；</li>
<li>魔漫相机：其实，我在那里呆了一天，团队虽只有五六十人，但其产品用户足有两亿多，可见其产品设计之成功，不符合自己的职业价值观，拒绝了；</li>
<li>租车公司：忘记了名字了，离家近，最后工资没有达成一致，公司方向也不是我想从事的，放弃；</li>
<li>纷享销客：这是我最难做出取舍的公司，团队特别棒，一路面试，总裁是微软出身的，最后，还是咬牙舍弃，人生的选择没有对与错，路是自己走出来的；</li>
<li>现公司：互联网金融，我很看好这个方向，因为自己也算是这个需求的用户，之前做过农行的e购天街，建行的微银行，算是金融产品出身；</li>
</ul>


<p>这些就是我今年年初的经历，说这些也算是回顾一下，因为这些也是反思，不知道自己的路选择的正确与否。目前来到公司做了三个项目，项目之间也有复用模块，做这项目也都倾注了自己所有的努力，结果是残忍的：</p>

<ul>
<li>项目一，因为公司战略问题，不了了之，已经到了上线的阶段，不理解。</li>
<li>项目二，复用了一些模块，添加了一些新功能，紧急上线了，也用到了实际门店，算是欣慰；</li>
<li>项目三，到了冒烟测试阶段，接到上级通知，战略调整，暂时放弃&hellip;</li>
</ul>


<p>这也是我为什么回顾今年历程的原因了，反思自己在这里成长得失，寻找接下来努力和选择的方向，对自己的要求，尽自己最大的努力去做好眼前的事情，我不想到年底总结的时候，自己回顾一年的努力，都是徒劳，于公：没有为公司带来实际效益，于私：技术没有大幅提升，也没有人力管理、时间管理等方面的实践和成长，这样的工作是很失败的，个人认为只有做到对自己负责的人，才有资格为他人负责，为公司负责，才有机会担当更重的责任。</p>

<p>唠叨了这么多，接下来还是要有目标的去提升自己，规划自己的职业道路。
分享今天看到的一句话：要想成为牛逼的人，就要去吃成为牛逼人所要吃的苦。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[如何下载和安装CocoaPods]]></title>
        <link href="http://swplzj.github.io/blog/2015/09/04/ru-he-xia-zai-he-an-zhuang-cocoapods/"/>
        <updated>2015-09-04T14:16:46+08:00</updated>
        <id>http://swplzj.github.io/blog/2015/09/04/ru-he-xia-zai-he-an-zhuang-cocoapods</id>
        <content type="html"><![CDATA[<h3>CocoaPods安装和使用教程</h3>

<hr />

<h4>CocoaPods是什么？</h4>

<p>CocoaPods是iOS第三方开源类库管理工具。</p>

<!--more-->


<h4>如何下载和安装CocoaPods？</h4>

<pre><code>sudo gem install cocoapods
</code></pre>

<p>GFW阻挡了cocoapods.org,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem sources --remove https://rubygems.org/
</span><span class='line'>//等有反应之后再敲入以下命令
</span><span class='line'>$ gem sources -a http://ruby.taobao.org/</span></code></pre></td></tr></table></div></figure>


<p>验证Ruby镜像</p>

<pre><code>$ gem sources -l
</code></pre>

<p>运行后出现</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*** CURRENT SOURCES ***
</span><span class='line'>
</span><span class='line'>http://ruby.taobao.org/   </span></code></pre></td></tr></table></div></figure>


<p>安装</p>

<pre><code>$ sudo gem install cocoapods
</code></pre>

<h4>如何使用CocoaPods？</h4>

<p>两种使用场景来具体说明如何使用CocoaPods。</p>

<h5>利用CocoaPods，在项目中导入AFNetworking类库</h5>

<pre><code>$ pod search AFNetworking
</code></pre>

<p>先利用Xcode创建一个名字CocoaPodsDemo的项目，
有个文件来控制CocoaPods该下载什么。这个文件就叫做“Podfile”（注意，一定得是这个文件名，而且没有后缀）。你创建一个Podfile文件，然后在里面添加你需要下载的类库，每个项目只需要一个Podfile文件。</p>

<p>在终端中进入（cd命令）你项目所在目录，然后在当前目录下，利用vim创建Podfile，运行：</p>

<pre><code>$ vim Podfile
</code></pre>

<p>然后在Podfile文件中输入以下文字：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>platform :ios, '7.0'
</span><span class='line'>pod "AFNetworking", "~&gt; 2.0"</span></code></pre></td></tr></table></div></figure>


<p>然后保存退出。vim环境下，保存退出命令是：</p>

<pre><code>:wq
</code></pre>

<p>你会发现你的项目目录中，出现一个名字为<code>Podfile</code>的文件，而且文件内容就是你刚刚输入的内容。注意，<code>Podfile</code>文件应该和你的工程文件<code>.xcodeproj</code>在同一个目录下。</p>

<pre><code>$ pod install 
</code></pre>

<p>注意：以后打开项目就用 <code>CocoaPodsDemo.xcworkspace</code> 打开，而不是之前的<code>.xcodeproj</code>文件。</p>

<h5>如何正确编译运行一个包含CocoPods类库的项目</h5>

<p>打开终端，进入<code>UAAppReviewManagerExample</code>所在的目录，也就是和<code>Podfile</code>在同一目录下，和场景1一样，输入以下命令（由于已经有<code>Podfile</code>，所以不需要再创建<code>Podfile</code>）：</p>

<pre><code>$ pod update
</code></pre>

<p>这时候，再回到UAAppReviewManagerExample文件夹看一看，会看到多了一个文件UAAppReviewManagerExample.xcworkspace：</p>

<p>注意，这里有个小问题，如果刚刚你不是输入<code>$ pod update</code>，而是输入<code>$ pod install</code>，会发现类库导入不成功，并且终端出现下面提示：</p>

<p><code>$ pod install</code>只会按照<code>Podfile</code>的要求来请求类库，如果类库版本号有变化，那么将获取失败。但是 <code>$ pod update</code>会更新所有的类库，获取最新版本的类库。而且你会发现，如果用了 <code>$ pod update</code>，再用 <code>$ pod install</code> 就成功了。</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[iOS - VPN强烈推荐]]></title>
        <link href="http://swplzj.github.io/blog/2015/08/19/ios-vpnqiang-lie-tui-jian/"/>
        <updated>2015-08-19T18:58:02+08:00</updated>
        <id>http://swplzj.github.io/blog/2015/08/19/ios-vpnqiang-lie-tui-jian</id>
        <content type="html"><![CDATA[<p>之前推荐过 Mac 上的 VPN 使用，今天推荐两款 iOS 端比价好用的 VPN 应用，真的用起来很方便。无需注册，轻松翻墙。</p>

<ol>
<li><code>ArkVPN</code>：优点：方便，速度快，免费，不限流量。缺点：不订阅的话需要每天领取时长，不过免费时长够用了。</li>
<li><code>Shadowsocks</code>：优点：方便，免费，开源，不限流量，不限时长。缺点：有些慢，有广告。</li>
</ol>


<!--more-->


<h3>ArkVPN</h3>

<ul>
<li><p>安装</p>

<p> <a href="https://itunes.apple.com/cn/app/arkvpn-wu-xian-liu-liang-mian/id909977824?mt=8">ArkVPN 下载地址</a></p></li>
<li><p>每天领取免费时长</p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_08_14_vpn_id1.PNG" title="\" ></p></li>
<li><p>只要一次点击，连接整个世界</p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_08_14_vpn_id2.PNG" title="\" ></p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_08_14_vpn_id3.PNG" title="\" ></p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_08_14_vpn_id4.PNG" title="\" ></p></li>
<li><p>国外服务器列表</p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_08_14_vpn_id5.PNG" title="\" ></p></li>
</ul>


<h3>Shadowsocks</h3>

<ul>
<li><p>简介
Shadowsocks 是一个开源项目，同时提供多个平台使用，你也可<a href="https://github.com/shadowsocks/shadowsocks">下载源码</a>进行研究。iOS客户端类似于一个封闭的浏览器，这这里可以翻墙浏览任何你想浏览的页面了。</p></li>
<li><p>安装</p></li>
</ul>


<p><a href="https://github.com/shadowsocks/shadowsocks-csharp">Windows</a> / <a href="https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-Help">OS X</a></p>

<p><a href="https://github.com/shadowsocks/shadowsocks-android">Android</a> / <a href="https://github.com/shadowsocks/shadowsocks-iOS/wiki/Help">iOS</a></p>

<p><a href="https://github.com/shadowsocks/openwrt-shadowsocks">OpenWRT</a></p>

<ul>
<li><p>使用</p>

<p>  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_08_14_vpn_id6.PNG" title="\" ><br/>
  <img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_08_14_vpn_id7.PNG" title="\" ></p></li>
</ul>


<p>Have fun！</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[正则表达式学习]]></title>
        <link href="http://swplzj.github.io/blog/2015/08/19/zheng-ze-biao-da-shi-xue-xi/"/>
        <updated>2015-08-19T11:45:54+08:00</updated>
        <id>http://swplzj.github.io/blog/2015/08/19/zheng-ze-biao-da-shi-xue-xi</id>
        <content type="html"><![CDATA[<p>项目中经常使用到一些校验，比如有效手机号，身份证号码，邮箱，银行卡号码&hellip;假如说都是简单的使用位数来做校验，容易造成特殊字符输入乱码，还有可能在数据库中写入脏数据，所以使用正则表达式来进行校验匹配是很有必要的，当然，我们学习它就要知道它有哪些作用，正则表达式的用途基本有以下三种：</p>

<ul>
<li>校验数据</li>
<li>查询数据</li>
<li>替换数据</li>
</ul>


<p>学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改。下面开始学习之旅：</p>

<!--more-->


<h3>语法</h3>

<p><code>.</code> 是元字符，匹配除了换行符以外的任意字符。</p>

<p><code>*</code> 是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定 <code>*</code> 前边的内容可以连续重复使用任意次以使整个表达式得到匹配。</p>

<p><code>.*</code> 连在一起就意味着任意数量的不包含换行的字符。</p>

<p><code>+</code> 重复一次或更多次</p>

<p><code>?</code> 重复零次或一次</p>

<p><code>{n}</code> 重复n次</p>

<p><code>{n,}</code>  重复n次或更多次</p>

<p><code>{n,m}</code> 重复n到m次</p>

<p><code>[]</code> 指定一个字符范围，比如，<strong>[aeiou]</strong>就匹配任何一个英文元音字母，<code>[0-9]</code>代表的含意与\d就是完全一致的。
<code>()</code> 小括号来指定子表达式(也叫做分组),比如：<strong>(\d{1,3}.){3}\d{1,3}</strong> 是一个简单的IP地址匹配表达式。</p>

<p><code>\b</code> 是正则表达式规定的一个特殊代码（也叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是<code>\b</code>并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。比如:在一段文本中查询<code>Leo</code>，就可以这样写：<strong>\bLeo\b</strong> 。</p>

<p><code>\B</code>    匹配不是单词开头或结束的位置</p>

<p><code>\d</code> 匹配一位数字，比如匹配大陆手机号码： <strong>1\d{10}</strong> ，{10} 意思是重复匹配10次。</p>

<p><code>\D</code>    匹配任意非数字的字符</p>

<p><code>\s</code> 匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。</p>

<p><code>\S</code>    匹配任意不是空白符的字符</p>

<p><code>\w</code> 匹配字母或数字或下划线或汉字等。</p>

<p><code>\W</code>    匹配任意不是字母，数字，下划线，汉字的字符</p>

<p><code>[^x]</code>  匹配除了x以外的任意字符</p>

<p><code>[^aeiou]</code>  匹配除了aeiou这几个字母以外的任意字符</p>

<p><code>^</code> 匹配字符串的开始，或者是行的开始处</p>

<p><code>$</code> 匹配字符串的结束，或者是行的结束处</p>

<p><code>|</code> 分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配。</p>

<p><code>\</code> 为转义字符，比如匹配网址：使用 <code>swplzj\.github\.io</code> 来匹配 <code>swplzj.github.io</code> 。</p>

<h3>后向引用</h3>

<h4>捕获</h4>

<p>(exp):  匹配exp,并捕获文本到自动命名的组里</p>

<p>(?<name>exp):   匹配exp,并捕获文本到名称为name的组里，也可以写成(?&lsquo;name'exp)</p>

<p>(?:exp):    匹配exp,不捕获匹配的文本，也不给此分组分配组号</p>

<h4>零宽断言</h4>

<p>(?=exp):    匹配exp前面的位置</p>

<p>(?&lt;=exp):   匹配exp后面的位置</p>

<p>(?!exp):    匹配后面跟的不是exp的位置</p>

<h4>注释</h4>

<p>(?#comment):    这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</p>

<h3>实例</h3>

<p>从下面文本中查询出以<code>[]</code>包含的内容，包括<code>[]</code></p>

<pre><code>The Tasmanian tiger, also known as the Thylacine, has been announced extinct many years ago. Now many geneticists assert that they are capable of recreating a [sid=13_1] from DNA extracted from its bone specimen. \n\nTasmanian tigers belong to marsupials that have a [sid=13_2] in common. They looked like big dogs with over 15 dark stripes on the body. When chasing their preys, these animals primarily depended on [sid=13_3] to prevail. Their stomach could inflate so they could eat large amount of food each time to [sid=13_4] a period lack of food.  
</code></pre>

<p>我们发现要查询的内容是以<code>[</code>开头，以 <code>]</code> 结束的，所以首先可以肯定的是  <code>\[\]</code>，注意需要转义字符<code>\</code>，然后<code>[]</code>之前包含的可能是 数字、空格、大小写字母、符号，但是不能包含<code>]</code>,所以我们可以写出 <code>\[[^\]]+\]</code></p>

<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_08_14_regular_express_id1.png" title="/" ></p>

<p>再增加点难度，要检索出<code>[]</code>里面的数据，我们可以先观察规律，因为正则表达式 - Regular Express 本身就是有规律的表达式，所以现发现规律，再写出所对应的正则。</p>

<p><strong>解答</strong></p>

<ul>
<li>以 <code>[</code> 开头，作为规律，可以写出 <code>(?&lt;=\[)([^\]])+</code></li>
</ul>


<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_08_14_regular_express_id2.png" title="/" ></p>

<ul>
<li>以<code>]</code> 结束，可以写出<code>[^\[]+(?=\])</code></li>
</ul>


<p><img class="center" src="http://7xkrxl.com1.z0.glb.clouddn.com/2015_08_14_regular_express_id3.png" title="/" ></p>

<h3>iOS中应用</h3>

<p>我们在开发iOS项目过程中，使用到正则表达式的主要场景有两种：</p>

<p><strong>第一</strong> 在应用中用户输入数据时，做正则匹配校验，这类比较常见，这里就不做详述，但是给出一个比较好的建议，就是把需要校验的项，单独创建一个 XML 文件，然后再自定义标签，属性，来进行统一存放项目中所有校验项，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version="1.0" encoding="utf-8"?&gt;
</span><span class='line'>&lt;rules&gt;
</span><span class='line'>    &lt;rule type="mobile" pattern="^1\d{10}$" tip="请输入正确的手机号" /&gt;
</span><span class='line'>&lt;/rules&gt;</span></code></pre></td></tr></table></div></figure>


<p>上面是简单校验手机号码位数的正则表达式，这样做的好处：方便维护管理；代码更为规范。</p>

<p><strong>第二</strong> 在使用 <code>UIWebView</code> 来加载文章类的页面时，使用正则表达式可以很好的提升用户体验。那使用正则我们可以做到那些呢？</p>

<ul>
<li><p>使用正则表达式来加载本地 <code>CSS</code> 样式表来自定义 <code>HTML</code> 中的样式；</p>

<ul>
<li>替换 <code>CSS</code> 样式表，这个可以实现 <code>HTML</code> 字体大小的动态调整；</li>
<li>可以实现类似白天、黑夜主题色的更换；</li>
<li>可以对文本进行标注、突出等处理；</li>
</ul>
</li>
<li><p>使用正则表达式获取 <code>HTML</code> 中的图片、视频，以便更友好的操作图片、视频资源；</p>

<ul>
<li>可以更改图片的大小展示；</li>
<li>通过正则匹配获取到图片的属性，比如id，然后进行本地操作，如，对图片添加点击事件，点击之后，进入本地图片浏览器，在图片浏览器中，就可以对图片进行放大、缩小、查看图片备注等操作了。</li>
</ul>
</li>
<li>使用正则表达式来为 <code>HTML</code> 添加元素；

<ul>
<li>可以为添加文章标题、发布时间等操作</li>
</ul>
</li>
</ul>


<p>使用场景已经描述完了，但是怎么样实现呢，下面直接上代码：</p>

<p><strong>加载本地 CSS </strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSRegularExpression *regularexpression = [[NSRegularExpression alloc]
</span><span class='line'>                                              initWithPattern:@"(?i)&lt;\\s*link\\s*href=\"[^\"]+\\.css\""
</span><span class='line'>                                              options:NSRegularExpressionCaseInsensitive
</span><span class='line'>                                              error:nil];
</span><span class='line'>    NSArray *matches = [regularexpression matchesInString:htmlContent options:0 range:NSMakeRange(0, [htmlContent length])];
</span><span class='line'>    NSString *content = htmlContent;
</span><span class='line'>    NSString *replaceStr = [NSString stringWithFormat:@"&lt;link href=\"%@\"",cssFilePath];
</span><span class='line'>    for (NSTextCheckingResult *match in matches){
</span><span class='line'>        NSRange matchRange = [match range];
</span><span class='line'>        content=[regularexpression stringByReplacingMatchesInString:content options:0 range:matchRange withTemplate:replaceStr];
</span><span class='line'>    }</span></code></pre></td></tr></table></div></figure>


<p><strong>获取图片资源</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> NSMutableArray *imageIds = [NSMutableArray array];
</span><span class='line'>    NSString *str = @"(?i)&lt;div\\s*class\\s*=\\s*\"[^\"]*img\"&gt;\\s*&lt;img\\s*[^&gt;]*id=\\s*\"[^&gt;]*&gt;";
</span><span class='line'> NSRegularExpression *regularexpression = [[NSRegularExpression alloc]
</span><span class='line'>                                              initWithPattern:str
</span><span class='line'>                                              options:NSRegularExpressionCaseInsensitive
</span><span class='line'>                                              error:nil];
</span><span class='line'> NSArray *matches = [regularexpression matchesInString:htmlContent
</span><span class='line'>                                                  options:0
</span><span class='line'>                                                    range:NSMakeRange(0, [htmlContent length])];
</span></code></pre></td></tr></table></div></figure>


<p><strong>对图片进行操作</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> NSString *str = @"(?i)&lt;div\\s*class=\"[^\"]*img\"&gt;\\s*&lt;img\\s*[^&gt;]*id=\\s*\"";
</span><span class='line'>
</span><span class='line'> str = [str stringByAppendingString:imageInfo.image_id];
</span><span class='line'> str = [str stringByAppendingString:@"\"\\s*src=\\s*\"[^\"]*\"[^&gt;]*&gt;"];
</span><span class='line'>
</span><span class='line'> NSString *replacejs = [NSString stringWithFormat:@"&lt;div class=\"img\" id=\"%@\" onclick=\"location.href='picid'+this.id\" style=\"background-color:#999999;width:%fpx;height:%fpx;\" /&gt;",imageInfo.image_id,width,height];
</span><span class='line'>
</span><span class='line'> replacejs = [replacejs stringByAppendingString:[NSString stringWithFormat:@"&lt;img src=\"%@\"  width=\"%fpx\" height=\"%fpx\"/&gt;",imagePath,width,0.0]];
</span><span class='line'> 
</span><span class='line'> replacejs = [replacejs stringByAppendingString:[NSString stringWithFormat:@"&lt;img src=\"%@\" width=\"180px\" height=\"36px\" style=\"margin-left:%fpx;margin-top:%fpx\"/&gt;",logoImagePath,(width / 2 - 90),(height/2 - 34)]];
</span><span class='line'>
</span><span class='line'> NSRegularExpression *regularexpression = [[NSRegularExpression alloc]
</span><span class='line'>                                          initWithPattern:str
</span><span class='line'>                                          options:NSRegularExpressionCaseInsensitive
</span><span class='line'>                                          error:nil];
</span><span class='line'> NSArray *matches = [regularexpression matchesInString:content options:0 range:NSMakeRange(0,  [content length])];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> for (NSTextCheckingResult *match in matches){
</span><span class='line'>    NSRange matchRange = [match range];
</span><span class='line'>    content=[regularexpression stringByReplacingMatchesInString:content options:0 range:matchRange withTemplate:replacejs];
</span><span class='line'> }
</span><span class='line'>            </span></code></pre></td></tr></table></div></figure>


<p><strong>放大缩小页面中的文本</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> NSString *jsString = [[NSString alloc] initWithFormat:@"document.getElementsByTagName('body')[0].style.webkitTextSizeAdjust= '%@'",textFontScale];
</span><span class='line'>    
</span><span class='line'>[_webView stringByEvaluatingJavaScriptFromString:jsString];</span></code></pre></td></tr></table></div></figure>


<p><strong>扩展 - 在本地HTML中加入JS</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *js = @"&lt;script language=\"javascript\" type=\"text/javascript\"&gt;";
</span><span class='line'> //替换css文件
</span><span class='line'>js = [js stringByAppendingString:@"function replacejscssfile(oldfilename, newfilename, filetype){ var targetelement=(filetype==\"js\")? \"script\" : (filetype==\"css\")? \"link\" : \"none\"; var targetattr=(filetype==\"js\")? \"src\" : (filetype==\"css\")? \"href\" : \"none\"; var allsuspects=document.getElementsByTagName(targetelement); for (var i=allsuspects.length; i&gt;=0; i--){ if (allsuspects[i] && allsuspects[i].getAttribute(targetattr)!=null && allsuspects[i].getAttribute(targetattr).indexOf(oldfilename)!=-1){ var newelement=createjscssfile(newfilename, filetype); allsuspects[i].parentNode.replaceChild(newelement, allsuspects[i]);} } return \"sdasds\";}"];
</span><span class='line'>
</span><span class='line'>js = [js stringByAppendingString:@"&lt;/script&gt;&lt;/head&gt;"];
</span><span class='line'>
</span><span class='line'>   NSString *content = [htmlContent stringByReplacingOccurrencesOfString:@"&lt;/head&gt;" withString:js];</span></code></pre></td></tr></table></div></figure>


<h3>常用正则表达式</h3>

<p>网址（URL）：  [a-zA-z]+://[^\s]*</p>

<p>IP地址(IP Address)： ((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)</p>

<p>电子邮件(Email)：  \w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*</p>

<p>QQ号码： [1-9]\d{4,}</p>

<p>HTML标记(包含内容或自闭合)： &lt;(.<em>)(.</em>)>.<em>&lt;\/\1>|&lt;(.</em>) \/></p>

<p>密码(由数字/大写字母/小写字母/标点符号组成，四种都必有，8位以上)：    (?=^.{8,}$)(?=.<em>\d)(?=.</em>\W+)(?=.<em>[A-Z])(?=.</em>[a-z])(?!.<em>\n).</em>$</p>

<p>日期(年-月-日)：  (\d{4}|\d{2})-((1[0-2])|(0?[1-9]))-(([12][0-9])|(3[01])|(0?[1-9]))</p>

<p>日期(月/日/年)：  ((1[0-2])|(0?[1-9]))/(([12][0-9])|(3[01])|(0?[1-9]))/(\d{4}|\d{2})</p>

<p>时间(小时:分钟, 24小时制)：   ((1|0?)[0-9]|2[0-3]):([0-5][0-9])</p>

<p>汉字(字符)：   [\u4e00-\u9fa5]</p>

<p>中文及全角标点符号(字符)：  [\u3000-\u301e\ufe10-\ufe19\ufe30-\ufe44\ufe50-\ufe6b\uff01-\uffee]</p>

<p>中国大陆固定电话号码：   (\d{4}-|\d{3}-)?(\d{8}|\d{7})</p>

<p>中国大陆手机号码： 1\d{10}</p>

<p>中国大陆邮政编码： [1-9]\d{5}</p>

<p>中国大陆身份证号(15位或18位)：  \d{15}(\d\d[0-9xX])?</p>

<p>非负整数(正整数或零)：    \d+</p>

<p>正整数：    [0-9]<em>[1-9][0-9]</em></p>

<p>负整数：    -[0-9]<em>[1-9][0-9]</em></p>

<p>整数：   -?\d+</p>

<p>小数：   (-?\d+)(.\d+)?</p>

<p>不包含abc的单词：    \b((?!abc)\w)+\b</p>

<h3>后记</h3>

<p>整理这篇博文的过程中，当然涉及到的知识不仅仅是正则表达式，还有后面通过 webview 和 JavaScript 进行交互，这是另一方面的知识了，就不在这里介绍了。马上七夕情人节了，大家快乐。就写到这里啦，还没有准备礼物，赶紧准备，不然&hellip;</p>

<p>参考博文：<a href="http://deerchao.net/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a></p>
]]></content>
    </entry>
    
</feed>
